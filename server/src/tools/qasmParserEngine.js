/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var qasmAnalyzer = (function () {
    var o = function (k, v, o, l) {
            for (o = o || {}, l = k.length; l--; o[k[l]] = v);
            return o
        },
        $V0 = [1, 12],
        $V1 = [1, 13],
        $V2 = [1, 14],
        $V3 = [1, 31],
        $V4 = [1, 30],
        $V5 = [1, 34],
        $V6 = [1, 22],
        $V7 = [1, 36],
        $V8 = [1, 35],
        $V9 = [1, 32],
        $Va = [1, 33],
        $Vb = [8, 15, 19, 23, 30, 39, 62, 75, 76, 80, 81],
        $Vc = [1, 8, 15, 19, 23, 30, 39, 62, 75, 76, 80, 81],
        $Vd = [1, 43],
        $Ve = [1, 67],
        $Vf = [1, 74],
        $Vg = [1, 90],
        $Vh = [1, 88],
        $Vi = [1, 84],
        $Vj = [1, 85],
        $Vk = [1, 86],
        $Vl = [1, 91],
        $Vm = [1, 92],
        $Vn = [1, 93],
        $Vo = [1, 94],
        $Vp = [1, 95],
        $Vq = [1, 96],
        $Vr = [18, 36],
        $Vs = [18, 28, 32],
        $Vt = [18, 36, 41],
        $Vu = [28, 36],
        $Vv = [1, 114],
        $Vw = [1, 115],
        $Vx = [1, 116],
        $Vy = [1, 117],
        $Vz = [1, 118],
        $VA = [28, 36, 45, 46, 47, 48, 54],
        $VB = [1, 130],
        $VC = [28, 36, 45, 46],
        $VD = [28, 36, 45, 46, 47, 48],
        $VE = [34, 39, 80, 81];
    var parser = {
        trace: function trace() {},
        yy: {},
        symbols_: {
            "error": 2,
            "code": 3,
            "sentences": 4,
            "headers": 5,
            "clean": 6,
            "CLEAN": 7,
            "EOF": 8,
            "QASM2": 9,
            "INCLUDE": 10,
            "sentence": 11,
            "definition": 12,
            "expression": 13,
            "conditional": 14,
            "QREG": 15,
            "reg": 16,
            "q_line": 17,
            "SEMICOLON": 18,
            "REG": 19,
            "gate_definition": 20,
            "opaque_definition": 21,
            "opaque": 22,
            "OPAQUE": 23,
            "gatename": 24,
            "opaque_definition_arguments": 25,
            "params_list": 26,
            "PARENTHESIS_O": 27,
            "PARENTHESIS_C": 28,
            "gate": 29,
            "GATE": 30,
            "gate_definition_arguments": 31,
            "BRACE_O": 32,
            "body": 33,
            "BRACE_C": 34,
            "param": 35,
            "COMMA": 36,
            "body_expression": 37,
            "params_list_body": 38,
            "CX": 39,
            "measure": 40,
            "->": 41,
            "e_reg": 42,
            "e": 43,
            "num": 44,
            "+": 45,
            "-": 46,
            "*": 47,
            "/": 48,
            "NUMBER": 49,
            "FLOAT_NUMBER": 50,
            "PI": 51,
            "exp": 52,
            "unaryop": 53,
            "^": 54,
            "SIN": 55,
            "COS": 56,
            "TAN": 57,
            "EXP": 58,
            "LN": 59,
            "SQRT": 60,
            "num_reg": 61,
            "IF": 62,
            "==": 63,
            "measure_creg": 64,
            "custom_arg_list": 65,
            "cx_gate": 66,
            "barrier_gate": 67,
            "reset_gate": 68,
            "cx": 69,
            "qubit_and_qreg_list": 70,
            "barrier": 71,
            "qubit_list": 72,
            "reset": 73,
            "qubit": 74,
            "RESET": 75,
            "BARRIER": 76,
            "params_list_number": 77,
            "qubit_or_qreg": 78,
            "arg_list": 79,
            "MEASURE": 80,
            "ID": 81,
            "BRACKETS_O": 82,
            "BRACKETS_C": 83,
            "$accept": 0,
            "$end": 1
        },
        terminals_: {
            2: "error",
            7: "CLEAN",
            8: "EOF",
            9: "QASM2",
            10: "INCLUDE",
            15: "QREG",
            18: "SEMICOLON",
            19: "REG",
            23: "OPAQUE",
            27: "PARENTHESIS_O",
            28: "PARENTHESIS_C",
            30: "GATE",
            32: "BRACE_O",
            34: "BRACE_C",
            36: "COMMA",
            39: "CX",
            41: "->",
            45: "+",
            46: "-",
            47: "*",
            48: "/",
            49: "NUMBER",
            50: "FLOAT_NUMBER",
            51: "PI",
            54: "^",
            55: "SIN",
            56: "COS",
            57: "TAN",
            58: "EXP",
            59: "LN",
            60: "SQRT",
            62: "IF",
            63: "==",
            75: "RESET",
            76: "BARRIER",
            80: "MEASURE",
            81: "ID",
            82: "BRACKETS_O",
            83: "BRACKETS_C"
        },
        productions_: [0, [3, 1],
            [3, 2],
            [3, 1],
            [6, 2],
            [5, 1],
            [5, 2],
            [5, 1],
            [4, 1],
            [4, 2],
            [11, 1],
            [11, 1],
            [11, 2],
            [11, 1],
            [12, 4],
            [12, 4],
            [12, 1],
            [12, 2],
            [22, 1],
            [21, 3],
            [25, 1],
            [25, 4],
            [29, 1],
            [20, 3],
            [31, 4],
            [31, 7],
            [31, 6],
            [31, 5],
            [31, 6],
            [31, 3],
            [26, 1],
            [26, 3],
            [33, 1],
            [33, 2],
            [37, 3],
            [37, 6],
            [37, 3],
            [37, 5],
            [38, 1],
            [38, 3],
            [43, 3],
            [43, 3],
            [43, 3],
            [43, 3],
            [43, 1],
            [44, 1],
            [44, 1],
            [44, 1],
            [44, 2],
            [42, 1],
            [52, 1],
            [52, 1],
            [52, 1],
            [52, 4],
            [52, 2],
            [52, 1],
            [52, 3],
            [52, 3],
            [52, 3],
            [52, 3],
            [52, 3],
            [52, 3],
            [53, 1],
            [53, 1],
            [53, 1],
            [53, 1],
            [53, 1],
            [53, 1],
            [61, 1],
            [61, 1],
            [61, 1],
            [61, 4],
            [61, 2],
            [61, 1],
            [14, 6],
            [13, 2],
            [13, 2],
            [13, 2],
            [13, 2],
            [13, 2],
            [66, 2],
            [69, 1],
            [67, 2],
            [67, 2],
            [68, 2],
            [68, 2],
            [73, 1],
            [71, 1],
            [65, 5],
            [65, 2],
            [70, 1],
            [70, 3],
            [78, 1],
            [78, 2],
            [77, 1],
            [77, 3],
            [79, 2],
            [64, 4],
            [64, 4],
            [40, 1],
            [24, 1],
            [72, 1],
            [72, 3],
            [74, 2],
            [17, 3],
            [16, 1],
            [35, 1]
        ],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */ , $$ /* vstack */ , _$ /* lstack */ , input) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 4:
                    cleanVars();
                    break;
                case 6:
                case 7:
                    cleanVars();
                    include = true;
                    initGateList(input);
                    break;
                case 13:

                    //order();
                    //var linesArrayCompleted = fillWithEmptyLines(linesArray, linesCount);  ///Only in 1.0
                    var result = {
                        gateDefinitions: transformGateDefinition(gateDefinitions),
                        topology: {
                            cregs: transformRegList(regList),
                            qregs: transformQRegList(qregList),
                            topology: {
                                qasmHeader: 'OPENQASM 2.0;\n',
                            },
                        },
                        playground: linesArray,
                        numberGates: nSentences,
                        hasMeasures: hasMeasure,
                        numberColumns: nColum + 1,
                        include: 'include "qelib1.inc";',
                        //numberLines: linesCount
                    };
                    // console.dir(result, { depth: null });
                    // console.log(JSON.stringify(result));
                    cleanVars();
                    return result;
                    break;
                case 14:
                    declare_qreg($$[$0 - 2], $$[$0 - 1], _$[$0 - 3].first_line)
                    break;
                case 15:
                    declare_reg($$[$0 - 2], $$[$0 - 1], _$[$0 - 3].first_line)
                    break;
                case 18:
                case 22:
                    if (checkSubroutinesDisable()) {
                        throw new parseError('Subroutines are disabled in this topology', _$[$0].first_line);
                    }

                    break;
                case 19:
                    add_gate($$[$0 - 1], _$[$0 - 2].first_line);
                    saveOpaqueDefinition($$[$0 - 1], $$[$0]);
                    break;
                case 20:
                    this.$ = {
                        lines: $$[$0]
                    }
                    break;
                case 21:
                    this.$ = {
                        lines: $$[$0],
                        params: $$[$0 - 2]
                    }
                    break;
                case 23:
                    add_gate($$[$0 - 1], _$[$0 - 2].first_line);
                    saveGateDefinition($$[$0 - 1], $$[$0]);
                    break;
                case 24:
                    check_body_args($$[$0 - 3], _$[$0 - 3].first_line);
                    check_body_params([], _$[$0 - 3].first_line);
                    this.$ = {
                        lines: $$[$0 - 3],
                        qasm: $$[$0 - 1]
                    }
                    break;
                case 25:
                    check_body_args($$[$0 - 3], _$[$0 - 6].first_line);
                    check_body_params($$[$0 - 5], _$[$0 - 6].first_line);
                    this.$ = {
                        params: $$[$0 - 5],
                        lines: $$[$0 - 3],
                        qasm: $$[$0 - 1]
                    }
                    break;
                case 26:
                    check_body_args($$[$0 - 2], _$[$0 - 5].first_line);
                    this.$ = {
                        params: $$[$0 - 4],
                        lines: $$[$0 - 2],
                        qasm: ""
                    }
                    break;
                case 27:
                    check_body_args($$[$0 - 2], _$[$0 - 4].first_line);
                    this.$ = {
                        lines: $$[$0 - 2],
                        qasm: ""
                    }
                    break;
                case 28:
                    check_body_args($$[$0 - 3], _$[$0 - 5].first_line);
                    check_body_params([], _$[$0 - 5].first_line);
                    this.$ = {
                        lines: $$[$0 - 3],
                        qasm: $$[$0 - 1]
                    }
                    break;
                case 29:
                    check_body_args($$[$0 - 2], _$[$0 - 2].first_line);
                    this.$ = {
                        lines: $$[$0 - 2],
                        qasm: ""
                    }
                    break;
                case 30:
                    auxList = [];
                    auxList.unshift($$[$0]);
                    this.$ = auxList;
                    break;
                case 31:
                    auxList.unshift($$[$0 - 2]);
                    this.$ = auxList;
                    break;
                case 32:
                    this.$ = $$[$0]
                    break;
                case 33:
                    this.$ = this.$ + $$[$0]
                    break;
                case 34:
                    check_gate($$[$0 - 2], _$[$0 - 2].first_line);
                    body_check_params($$[$0 - 2], $$[$0 - 1], undefined, _$[$0 - 2].first_line);
                    usedArgs = usedArgs.concat($$[$0 - 1]);
                    this.$ = $$[$0 - 2] + ' ' + $$[$0 - 1] + $$[$0] + '\n';
                    break;
                case 35:
                    check_gate($$[$0 - 5], _$[$0 - 5].first_line);
                    body_check_params($$[$0 - 5], $$[$0 - 1], $$[$0 - 3], _$[$0 - 5].first_line);
                    usedArgs = usedArgs.concat($$[$0 - 1]);
                    usedParams = usedParams.concat($$[$0 - 3]);
                    bodyParamList = [];
                    this.$ = $$[$0 - 5] + ' ' + $$[$0 - 4] + $$[$0 - 3] + $$[$0 - 2] + ' ' + $$[$0 - 1] + $$[$0] + '\n';
                    break;
                case 36:
                    check_cx_args($$[$0 - 1], _$[$0 - 2].first_line);
                    usedArgs = usedArgs.concat($$[$0 - 1]);
                    this.$ = $$[$0 - 2] + ' ' + $$[$0 - 1] + $$[$0] + '\n';
                    break;
                case 37:
                    throw new parseError('Measure is invalid in a gate definition', _$[$0 - 4].first_line);
                    break;
                case 38:
                case 39:
                    bodyParamList.push($$[$0]);
                    this.$ = bodyParamList;
                    makeParamRelation(param_strings, $$[$0]);
                    param_strings = [];
                    break;
                case 40:
                    this.$ = $$[$0 - 2] + $$[$0];
                    break;
                case 41:
                    this.$ = $$[$0 - 2] - $$[$0];
                    break;
                case 42:
                    this.$ = $$[$0 - 2] * $$[$0];
                    break;
                case 43:
                    this.$ = $$[$0 - 2] / $$[$0];
                    break;
                case 45:
                case 46:
                case 50:
                case 51:
                case 68:
                case 69:
                    this.$ = Number(yytext);
                    break;
                case 47:
                    this.$ = Math.PI;
                    break;
                case 48:
                    this.$ = -$$[$0];
                    break;
                case 49:
                    check_limit($$[$0], _$[$0].first_line);
                    break;
                case 53:
                case 71:
                    this.$ = $$[$0 - 3] + $$[$0 - 2] + $$[$0 - 1] + $$[$0];
                    break;
                case 54:
                case 72:
                    this.$ = '-' + $$[$0];
                    break;
                case 55:
                case 73:
                    param_strings.push($$[$0]);
                    break;
                case 56:
                    this.$ = $$[$0 - 2] + $$[$0 - 1] + $$[$0];
                    break;
                case 57:
                    this.$ = $$[$0 - 2] + $$[$0 - 1] + $$[$0];
                    break;
                case 58:
                case 59:
                case 60:
                case 61:
                    this.$ = $$[$0 - 2] + $$[$0 - 1] + $$[$0];
                    break;
                case 74:
                    checkOperationsDisable(_$[$0 - 5].first_line);
                    calculateConditional($$[$0 - 3], parseInt($$[$0 - 1]), _$[$0 - 5].first_line);
                    this.$ = $$[$0 - 5] + $$[$0 - 4] + $$[$0 - 3] + $$[$0 - 2] + $$[$0 - 1] + $$[$0] + ' ';
                    break;
                case 75:
                case 76:
                    nSentences++;
                    break;
                case 78:
                    barrier_init = false;
                    break;
                case 80:
                    auxRegList = [];
                    makeCxGate($$[$0], _$[$0 - 1].first_line);
                    qargsList.list = [];
                    qargsList.size = 1;
                    break;
                case 81:
                case 87:
                    lastQasmName = $$[$0];
                    break;
                case 82:
                    lastQasmName = $$[$0 - 1];
                    addAllRegs($$[$0], _$[$0 - 1].first_line);
                    break;
                case 84:
                    addAllRegs($$[$0], _$[$0 - 1].first_line);
                    break;
                case 86:
                    checkOperationsDisable(_$[$0].first_line);
                    lastQasmName = $$[$0];
                    break;
                case 88:
                    check_gate($$[$0 - 4], _$[$0 - 4].first_line);
                    check_params($$[$0 - 2], _$[$0 - 4].first_line);
                    check_regs($$[$0], _$[$0 - 4].first_line);
                    addCustomRegs(_$[$0 - 4].first_line);
                    auxRegList = [];
                    break;
                case 89:
                    check_gate($$[$0 - 1], _$[$0 - 1].first_line);
                    check_params([], _$[$0 - 1].first_line);
                    check_regs($$[$0], _$[$0 - 1].first_line);
                    addCustomRegs(_$[$0 - 1].first_line);
                    auxRegList = [];
                    break;
                case 90:
                    auxRegList.push($$[$0]);
                    this.$ = auxRegList;
                    break;
                case 91:
                    auxRegList.push($$[$0 - 2]);
                    this.$ = auxRegList;
                    break;
                case 92:
                    check_qreg($$[$0], _$[$0].first_line);
                    check_register($$[$0], 0, _$[$0].first_line);
                    lastReg = $$[$0], addQargsList(undefined, _$[$0].first_line);
                    this.$ = {
                        regName: $$[$0]
                    }
                    break;
                case 93:
                    check_qreg($$[$0 - 1], _$[$0 - 1].first_line);
                    check_register($$[$0 - 1], $$[$0], _$[$0 - 1].first_line);
                    lastReg = $$[$0 - 1], addQargsList($$[$0], _$[$0 - 1].first_line);
                    this.$ = {
                        regName: $$[$0 - 1],
                        line: $$[$0]
                    };
                    break;
                case 94:
                    customGateParams.push($$[$0]);
                    this.$ = customGateParams;
                    checkParams(param_strings, _$[$0].first_line);
                    param_strings = [];
                    break;
                case 95:
                    customGateParams.push($$[$0]);
                    this.$ = customGateParams;
                    checkParams(param_strings, _$[$0 - 2].first_line);
                    param_strings = [];
                    break;
                case 96:
                    check_gate($$[$0 - 1], _$[$0 - 1].first_line);
                    break;
                case 98:
                    check_qreg($$[$0 - 2], _$[$0 - 3].first_line);
                    check_register($$[$0 - 2], 0, _$[$0 - 3].first_line);
                    check_register($$[$0], 0, _$[$0 - 3].first_line);
                    measureCreg($$[$0 - 2], $$[$0], _$[$0 - 3].first_line);
                    break;
                case 99:
                    lastQasmName = $$[$0];
                    break;
                case 100:
                    checkValidIdentifier($$[$0], _$[$0].first_line);
                    lastQasmName = $$[$0];
                    this.$ = $$[$0];
                    break;
                case 103:
                    check_register($$[$0 - 1], $$[$0], _$[$0 - 1].first_line);
                    lastReg = $$[$0 - 1];
                    addLine(parseInt($$[$0]), _$[$0 - 1].first_line);
                    this.$ = $$[$0];
                    break;
                case 104:
                    this.$ = $$[$0 - 1];
                    break;
                case 105:
                case 106:
                    checkValidIdentifier($$[$0], _$[$0].first_line);
                    break;
            }
        },
        table: [{
            3: 1,
            4: 2,
            5: 3,
            6: 4,
            7: [1, 8],
            8: $V0,
            9: [1, 6],
            10: [1, 7],
            11: 5,
            12: 9,
            13: 10,
            14: 11,
            15: $V1,
            19: $V2,
            20: 15,
            21: 16,
            22: 24,
            23: $V3,
            24: 26,
            29: 23,
            30: $V4,
            39: $V5,
            40: 25,
            62: $V6,
            64: 17,
            65: 18,
            66: 19,
            67: 20,
            68: 21,
            69: 27,
            71: 28,
            73: 29,
            75: $V7,
            76: $V8,
            80: $V9,
            81: $Va
        }, {
            1: [3]
        }, {
            1: [2, 1]
        }, {
            4: 37,
            8: $V0,
            11: 5,
            12: 9,
            13: 10,
            14: 11,
            15: $V1,
            19: $V2,
            20: 15,
            21: 16,
            22: 24,
            23: $V3,
            24: 26,
            29: 23,
            30: $V4,
            39: $V5,
            40: 25,
            62: $V6,
            64: 17,
            65: 18,
            66: 19,
            67: 20,
            68: 21,
            69: 27,
            71: 28,
            73: 29,
            75: $V7,
            76: $V8,
            80: $V9,
            81: $Va
        }, {
            1: [2, 3]
        }, {
            1: [2, 8],
            4: 38,
            8: $V0,
            11: 5,
            12: 9,
            13: 10,
            14: 11,
            15: $V1,
            19: $V2,
            20: 15,
            21: 16,
            22: 24,
            23: $V3,
            24: 26,
            29: 23,
            30: $V4,
            39: $V5,
            40: 25,
            62: $V6,
            64: 17,
            65: 18,
            66: 19,
            67: 20,
            68: 21,
            69: 27,
            71: 28,
            73: 29,
            75: $V7,
            76: $V8,
            80: $V9,
            81: $Va
        }, o($Vb, [2, 5], {
            10: [1, 39]
        }), o($Vb, [2, 7]), {
            8: [1, 40]
        }, o($Vc, [2, 10]), o($Vc, [2, 11]), {
            13: 41,
            24: 26,
            39: $V5,
            40: 25,
            64: 17,
            65: 18,
            66: 19,
            67: 20,
            68: 21,
            69: 27,
            71: 28,
            73: 29,
            75: $V7,
            76: $V8,
            80: $V9,
            81: $Va
        }, o($Vc, [2, 13]), {
            16: 42,
            81: $Vd
        }, {
            16: 44,
            81: $Vd
        }, o($Vc, [2, 16]), {
            18: [1, 45]
        }, {
            18: [1, 46]
        }, {
            18: [1, 47]
        }, {
            18: [1, 48]
        }, {
            18: [1, 49]
        }, {
            18: [1, 50]
        }, {
            27: [1, 51]
        }, {
            24: 52,
            81: $Va
        }, {
            24: 53,
            81: $Va
        }, {
            16: 55,
            74: 54,
            81: $Vd
        }, {
            16: 59,
            27: [1, 56],
            70: 57,
            78: 58,
            81: $Vd
        }, {
            16: 59,
            70: 60,
            78: 58,
            81: $Vd
        }, {
            16: 61,
            72: 62,
            74: 63,
            81: $Vd
        }, {
            16: 64,
            74: 65,
            81: $Vd
        }, {
            81: [2, 22]
        }, {
            81: [2, 18]
        }, {
            81: [2, 99]
        }, o([27, 81], [2, 100]), {
            81: [2, 81]
        }, {
            81: [2, 87]
        }, {
            81: [2, 86]
        }, {
            1: [2, 2]
        }, {
            1: [2, 9]
        }, o($Vb, [2, 6]), {
            1: [2, 4]
        }, o($Vc, [2, 12]), {
            17: 66,
            82: $Ve
        }, o([18, 36, 41, 63, 82], [2, 105]), {
            17: 68,
            82: $Ve
        }, o($Vc, [2, 17]), o($Vc, [2, 75]), o($Vc, [2, 76]), o($Vc, [2, 77]), o($Vc, [2, 78]), o($Vc, [2, 79]), {
            16: 69,
            81: $Vd
        }, {
            26: 71,
            27: [1, 72],
            31: 70,
            35: 73,
            81: $Vf
        }, {
            25: 75,
            26: 76,
            27: [1, 77],
            35: 73,
            81: $Vf
        }, {
            41: [1, 78]
        }, {
            17: 80,
            41: [1, 79],
            82: $Ve
        }, {
            27: $Vg,
            35: 89,
            42: 82,
            46: $Vh,
            49: $Vi,
            50: $Vj,
            51: $Vk,
            52: 83,
            53: 87,
            55: $Vl,
            56: $Vm,
            57: $Vn,
            58: $Vo,
            59: $Vp,
            60: $Vq,
            77: 81,
            81: $Vf
        }, {
            18: [2, 89]
        }, {
            18: [2, 90],
            36: [1, 97]
        }, o($Vr, [2, 92], {
            17: 98,
            82: $Ve
        }), {
            18: [2, 80]
        }, {
            17: 80,
            18: [2, 82],
            82: $Ve
        }, {
            18: [2, 83],
            36: [1, 99]
        }, o($Vr, [2, 101]), {
            17: 80,
            18: [2, 84],
            82: $Ve
        }, {
            18: [2, 85]
        }, {
            18: [1, 100]
        }, {
            49: [1, 101]
        }, {
            18: [1, 102]
        }, {
            63: [1, 103]
        }, o($Vc, [2, 23]), {
            32: [1, 104]
        }, {
            26: 105,
            28: [1, 106],
            35: 73,
            81: $Vf
        }, o($Vs, [2, 30], {
            36: [1, 107]
        }), o([18, 28, 32, 36, 45, 46, 47, 48, 54], [2, 106]), {
            18: [2, 19]
        }, {
            18: [2, 20]
        }, {
            26: 108,
            35: 73,
            81: $Vf
        }, {
            16: 110,
            74: 109,
            81: $Vd
        }, {
            16: 111,
            81: $Vd
        }, o($Vt, [2, 103]), {
            28: [1, 112],
            36: [1, 113]
        }, o($Vu, [2, 94]), o($Vu, [2, 49], {
            45: $Vv,
            46: $Vw,
            47: $Vx,
            48: $Vy,
            54: $Vz
        }), o($VA, [2, 50]), o($VA, [2, 51]), o($VA, [2, 52]), {
            27: [1, 119]
        }, {
            27: $Vg,
            35: 89,
            46: $Vh,
            49: $Vi,
            50: $Vj,
            51: $Vk,
            52: 120,
            53: 87,
            55: $Vl,
            56: $Vm,
            57: $Vn,
            58: $Vo,
            59: $Vp,
            60: $Vq,
            81: $Vf
        }, o($VA, [2, 55]), {
            27: $Vg,
            35: 89,
            46: $Vh,
            49: $Vi,
            50: $Vj,
            51: $Vk,
            52: 121,
            53: 87,
            55: $Vl,
            56: $Vm,
            57: $Vn,
            58: $Vo,
            59: $Vp,
            60: $Vq,
            81: $Vf
        }, {
            27: [2, 62]
        }, {
            27: [2, 63]
        }, {
            27: [2, 64]
        }, {
            27: [2, 65]
        }, {
            27: [2, 66]
        }, {
            27: [2, 67]
        }, {
            16: 59,
            70: 122,
            78: 58,
            81: $Vd
        }, o($Vr, [2, 93]), {
            16: 110,
            74: 123,
            81: $Vd
        }, o($Vc, [2, 14]), {
            83: [1, 124]
        }, o($Vc, [2, 15]), {
            49: [1, 125]
        }, {
            24: 129,
            33: 126,
            34: [1, 127],
            37: 128,
            39: $VB,
            40: 131,
            80: $V9,
            81: $Va
        }, {
            28: [1, 132]
        }, {
            26: 133,
            35: 73,
            81: $Vf
        }, {
            26: 134,
            35: 73,
            81: $Vf
        }, {
            28: [1, 135]
        }, {
            18: [2, 97]
        }, {
            17: 80,
            82: $Ve
        }, {
            18: [2, 98]
        }, {
            16: 59,
            70: 136,
            78: 58,
            81: $Vd
        }, {
            27: $Vg,
            35: 89,
            42: 137,
            46: $Vh,
            49: $Vi,
            50: $Vj,
            51: $Vk,
            52: 83,
            53: 87,
            55: $Vl,
            56: $Vm,
            57: $Vn,
            58: $Vo,
            59: $Vp,
            60: $Vq,
            81: $Vf
        }, {
            27: $Vg,
            35: 89,
            46: $Vh,
            49: $Vi,
            50: $Vj,
            51: $Vk,
            52: 138,
            53: 87,
            55: $Vl,
            56: $Vm,
            57: $Vn,
            58: $Vo,
            59: $Vp,
            60: $Vq,
            81: $Vf
        }, {
            27: $Vg,
            35: 89,
            46: $Vh,
            49: $Vi,
            50: $Vj,
            51: $Vk,
            52: 139,
            53: 87,
            55: $Vl,
            56: $Vm,
            57: $Vn,
            58: $Vo,
            59: $Vp,
            60: $Vq,
            81: $Vf
        }, {
            27: $Vg,
            35: 89,
            46: $Vh,
            49: $Vi,
            50: $Vj,
            51: $Vk,
            52: 140,
            53: 87,
            55: $Vl,
            56: $Vm,
            57: $Vn,
            58: $Vo,
            59: $Vp,
            60: $Vq,
            81: $Vf
        }, {
            27: $Vg,
            35: 89,
            46: $Vh,
            49: $Vi,
            50: $Vj,
            51: $Vk,
            52: 141,
            53: 87,
            55: $Vl,
            56: $Vm,
            57: $Vn,
            58: $Vo,
            59: $Vp,
            60: $Vq,
            81: $Vf
        }, {
            27: $Vg,
            35: 89,
            46: $Vh,
            49: $Vi,
            50: $Vj,
            51: $Vk,
            52: 142,
            53: 87,
            55: $Vl,
            56: $Vm,
            57: $Vn,
            58: $Vo,
            59: $Vp,
            60: $Vq,
            81: $Vf
        }, {
            27: $Vg,
            35: 89,
            46: $Vh,
            49: $Vi,
            50: $Vj,
            51: $Vk,
            52: 143,
            53: 87,
            55: $Vl,
            56: $Vm,
            57: $Vn,
            58: $Vo,
            59: $Vp,
            60: $Vq,
            81: $Vf
        }, o($VC, [2, 54], {
            47: $Vx,
            48: $Vy,
            54: $Vz
        }), {
            28: [1, 144],
            45: $Vv,
            46: $Vw,
            47: $Vx,
            48: $Vy,
            54: $Vz
        }, {
            18: [2, 91]
        }, o($Vr, [2, 102]), o($Vt, [2, 104]), {
            28: [1, 145]
        }, {
            34: [1, 146]
        }, o($Vc, [2, 29]), {
            24: 129,
            33: 147,
            34: [2, 32],
            37: 128,
            39: $VB,
            40: 131,
            80: $V9,
            81: $Va
        }, {
            26: 148,
            27: [1, 149],
            35: 73,
            81: $Vf
        }, {
            26: 150,
            35: 73,
            81: $Vf
        }, {
            16: 151,
            81: $Vd
        }, {
            26: 152,
            35: 73,
            81: $Vf
        }, {
            32: [1, 153]
        }, o($Vs, [2, 31]), {
            26: 154,
            35: 73,
            81: $Vf
        }, {
            18: [2, 88]
        }, o($Vu, [2, 95]), o($VC, [2, 57], {
            47: $Vx,
            48: $Vy,
            54: $Vz
        }), o($VC, [2, 58], {
            47: $Vx,
            48: $Vy,
            54: $Vz
        }), o($VD, [2, 59], {
            54: $Vz
        }), o($VD, [2, 60], {
            54: $Vz
        }), o($VA, [2, 61]), {
            28: [1, 155],
            45: $Vv,
            46: $Vw,
            47: $Vx,
            48: $Vy,
            54: $Vz
        }, o($VA, [2, 56]), o([39, 75, 76, 80, 81], [2, 74]), o($Vc, [2, 24]), {
            34: [2, 33]
        }, {
            18: [1, 156]
        }, {
            27: $Vg,
            35: 89,
            38: 157,
            42: 158,
            46: $Vh,
            49: $Vi,
            50: $Vj,
            51: $Vk,
            52: 83,
            53: 87,
            55: $Vl,
            56: $Vm,
            57: $Vn,
            58: $Vo,
            59: $Vp,
            60: $Vq,
            81: $Vf
        }, {
            18: [1, 159]
        }, {
            41: [1, 160]
        }, {
            32: [1, 161]
        }, {
            24: 129,
            33: 163,
            34: [1, 162],
            37: 128,
            39: $VB,
            40: 131,
            80: $V9,
            81: $Va
        }, {
            18: [2, 21]
        }, o($VA, [2, 53]), o($VE, [2, 34]), {
            28: [1, 164],
            36: [1, 165]
        }, o($Vu, [2, 38]), o($VE, [2, 36]), {
            16: 166,
            81: $Vd
        }, {
            24: 129,
            33: 167,
            34: [1, 168],
            37: 128,
            39: $VB,
            40: 131,
            80: $V9,
            81: $Va
        }, o($Vc, [2, 27]), {
            34: [1, 169]
        }, {
            26: 170,
            35: 73,
            81: $Vf
        }, {
            27: $Vg,
            35: 89,
            42: 171,
            46: $Vh,
            49: $Vi,
            50: $Vj,
            51: $Vk,
            52: 83,
            53: 87,
            55: $Vl,
            56: $Vm,
            57: $Vn,
            58: $Vo,
            59: $Vp,
            60: $Vq,
            81: $Vf
        }, {
            18: [1, 172]
        }, {
            34: [1, 173]
        }, o($Vc, [2, 26]), o($Vc, [2, 28]), {
            18: [1, 174]
        }, o($Vu, [2, 39]), o($VE, [2, 37]), o($Vc, [2, 25]), o($VE, [2, 35])],
        defaultActions: {
            2: [2, 1],
            4: [2, 3],
            30: [2, 22],
            31: [2, 18],
            32: [2, 99],
            34: [2, 81],
            35: [2, 87],
            36: [2, 86],
            37: [2, 2],
            38: [2, 9],
            40: [2, 4],
            57: [2, 89],
            60: [2, 80],
            65: [2, 85],
            75: [2, 19],
            76: [2, 20],
            91: [2, 62],
            92: [2, 63],
            93: [2, 64],
            94: [2, 65],
            95: [2, 66],
            96: [2, 67],
            109: [2, 97],
            111: [2, 98],
            122: [2, 91],
            136: [2, 88],
            147: [2, 33],
            154: [2, 21]
        },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                function _parseError(msg, hash) {
                    this.message = msg;
                    this.hash = hash;
                }
                _parseError.prototype = Error;

                throw new _parseError(str, hash);
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = {
                yy: {}
            };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }

            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack:
                var lex = function () {
                    var token;
                    token = lexer.lex() || EOF;
                    if (typeof token !== 'number') {
                        token = self.symbols_[token] || token;
                    }
                    return token;
                };
            var symbol, preErrorSymbol, state, action, a, r, yyval = {},
                p, len, newState, expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [
                                lstack[lstack.length - (len || 1)].range[0],
                                lstack[lstack.length - 1].range[1]
                            ];
                        }
                        r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            sharedState.yy,
                            action[1],
                            vstack,
                            lstack
                        ].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }
    };

    var nSentences = 0;
    var nColum = 0;
    var lastLine = -1;
    var lastReg = -1;
    var cxInitialised = -1;
    var measureInitialized = -1;
    var measureInitializedReg;
    var linesArray = [];
    var lastQasmName, linePosition;
    var hasMeasure = false;
    var qregList = [];
    var regList = [];
    // var gateList = ['h', 's', 'sdg', 'v', 'w', 't', 'tdg', 'x', 'y', 'z', 'id', 'CX', 'measure', 'bloch', 'barrier'];
    var gateList = [];
    var gateListName = [];
    var customGatesList = [];
    var auxList = [];
    var gateDefinitions = {};
    var conditional = {};
    var uArguments = [];
    var customGateLine = [];
    var customGateParams = [];
    var usedArgs = [];
    var barrier_init = false;
    var qargsList = {};
    qargsList.list = [];
    qargsList.size = 1;
    var auxRegList = [];
    var definitedSubroutines = [];
    // var definitedSubroutines = ['cz', 'cy', 'toffoli', 'crz', 'cU', 'cu', 'u1', 'u2', 'u3', 'ccX', 'ccx'];
    var bodyParamList = [];
    var usedParams = [];
    var param_strings = [];
    var paramsRelation = {};
    var include = false;
    var cxMatrix = [];
    var disableSubroutine = false;
    var disableOperations = false;
    var measureBlock = false;
    var measureList = [];

    function cleanVars() {
        gateList = [];
        gateListName = [];
        nSentences = 0;
        nColum = 0;
        lastLine = -1;
        lastReg = '';
        measureInitializedReg = '';
        cxInitialised = -1;
        measureInitialized = -1;
        linesArray = [];
        hasMeasure = false;
        qregList = [];
        regList = [];
        customGatesList = [];
        auxList = [];
        gateDefinitions = {};
        conditional = {};
        uArguments = [];
        customGateLine = [];
        customGateParams = [];
        usedArgs = [];
        barrier_init = false;
        qargsList = [];
        qargsList.list = [];
        qargsList.size = 1;
        auxRegList = [];
        bodyParamList = [];
        usedParams = [];
        param_strings = [];
        paramsRelation = {};
        include = false;
        cxMatrix = [];
        disableSubroutine = false;
        disableOperations = false;
        definitedSubroutines = [];
        measureBlock = false;
        measureList = [];

    }

    function existInLinesArray(line, regName) { //if exist array[..,{line: line, name: lastReg},..] return the position
        var len = linesArray.length;
        for (var i = 0; i < len; i++) {
            if (linesArray[i].name == regName) {
                for (var j = i; j < len; j++) {
                    if (linesArray[j].line == line) {
                        return j;
                    }
                }
            }
        }
        return -1;
    }

    function newGate(gateTo) {
        var properties;
        var gatePosition = gateList.indexOf(lastQasmName);
        var gateName = lastQasmName;
        if (gatePosition >= 0) {
            gateName = gateListName[gatePosition];
        }
        if (typeof gateTo !== 'undefined') {
            properties = {
                name: gateName,
                qasm: lastQasmName,
                position: nColum,
                to: gateTo
            };
        } else {
            properties = {
                name: gateName,
                qasm: lastQasmName,
                position: nColum
            }
        }

        if (Object.keys(conditional).length > 0) {
            line = conditional.line;

            if (lastLine < line) {
                lastLine = line;
            }
            var if_object = conditional;
            conditional = {};
        }

        if (if_object) {
            var gate_properties = properties;
            properties = {};
            properties.name = 'if';
            properties.qasm = 'if';
            properties.position = gate_properties.position;
            properties.if = {
                gate: gate_properties,
                line: if_object.line,
                value: if_object.value,
            }
        }

        return properties;

    }

    function calculateTotalLine(lineNum, reg) {
        var lineList = qregList.concat(regList);
        var sizeAccumulated = 0;
        var number = parseInt(lineNum);
        var compareReg = lastReg;
        if (reg) {
            compareReg = reg;
        }
        for (var i = 0; i < lineList.length; i++) {
            if (lineList[i].name == compareReg) {
                number = number + sizeAccumulated;
            }
            sizeAccumulated = sizeAccumulated + parseInt(lineList[i].size);
        }
        return number;
    }


    function updateLines(line, regName, errorLine, gateTo, regTo) {
        if (typeof gateTo !== 'undefined') {
            gateTo = calculateTotalLine(gateTo, regTo);
        }
        if (existInLinesArray(line, lastReg) == -1) {
            throw new parseError('Register ' + lastReg + '[' + line + '] is not valid', errorLine);
        }
        var position = existInLinesArray(line, lastReg);
        if (typeof regName !== 'undefined') {
            line = calculateTotalLine(line, regName);
        }
        if ((line <= lastLine) || ((typeof gateTo !== 'undefined') && (gateTo <= lastLine))) {
            nColum++;
        }

        if (gateTo) {
            if (gateTo > line) {
                line = gateTo;
            }
        }
        lastLine = line;
    }

    function checkCxMatrix(toLine, line) {
        if (cxMatrix[toLine][line] == 1) {
            return true;
        }
        return false;
    }

    function checkNotMeasure(lineNumber, errorLine) {
        if (measureBlock) {
            if ((measureList.indexOf(lineNumber) >= 0) || (lineNumber == -1)) {
                throw new parseError('Gates after a measure are blocked', errorLine)
            }
        }
    }

    function addLine(lineNumber, errorLine) {
        if ((gateList.indexOf(lastQasmName) < 0) && (customGatesList.indexOf(lastQasmName) < 0)) {
            throw new parseError('Gate ' + lastQasmName + ' is not defined', errorLine);
        }
        switch (lastQasmName) {
            case 'CX':
            case 'cx':
                if (cxInitialised != -1) {
                    if (cxMatrix.length > 0) {
                        if (!checkCxMatrix(cxInitialised, lineNumber)) {
                            throw new parseError('CX gate between ' + gateToReg + '[' + cxInitialised + '], ' + lastReg + '[' + lineNumber + '] is not allowed in this topology ', errorLine);
                        }
                    }
                    updateLines(lineNumber, lastReg, errorLine, cxInitialised, gateToReg);
                    linePosition = existInLinesArray(lineNumber, lastReg);
                    lastReg = gateToReg;
                    var arrayPosition = calculateTotalLine(cxInitialised);
                    if (linePosition == arrayPosition) {
                        throw new parseError('CX gate must be between distinct qubits', errorLine);
                    }
                    if (!linesArray[linePosition].gates) {
                        linesArray[linePosition].gates = [];
                    }
                    checkNotMeasure(linePosition, errorLine);
                    checkNotMeasure(cxInitialised, errorLine);
                    linesArray[linePosition].gates.push(newGate(arrayPosition));
                    cxInitialised = -1;
                } else {
                    cxInitialised = lineNumber;
                    gateToReg = lastReg;
                }
                break;

            case 'barrier':
                addLineBarrier(lineNumber, errorLine);
                break;
            case 'measure':
                hasMeasure = true;
                if (measureInitialized != -1) {;
                    check_measure_regs(measureInitializedReg, lastReg, errorLine);
                    totalLineReg = calculateTotalLine(0);
                    cregLine = lastReg;
                    lastReg = measureInitializedReg;
                    updateLines(measureInitialized, lastReg, errorLine);
                    linePosition = existInLinesArray(measureInitialized, measureInitializedReg);

                    var gatePosition = gateList.indexOf(lastQasmName);
                    var gateName = lastQasmName;
                    if (gatePosition >= 0) {
                        gateName = gateListName[gatePosition];
                    }

                    var obj = {
                        name: gateName,
                        qasm: lastQasmName,
                        position: nColum
                    };
                    obj.measureCreg = {
                        line: totalLineReg,
                        bit: lineNumber
                    };
                    if (!linesArray[linePosition].gates) {
                        linesArray[linePosition].gates = [];
                    }
                    checkNotMeasure(linePosition, errorLine);
                    measureList.push(calculateTotalLine(measureInitialized, measureInitializedReg));
                    linesArray[linePosition].gates.push(newCustomGate(obj));
                    lastLine = totalLineReg;
                    measureInitialized = -1;
                } else {
                    measureInitialized = lineNumber;
                    measureInitializedReg = lastReg;
                }

                break;

            default:
                var position = customGatesList.indexOf(lastQasmName);
                if (position >= 0) { //if is custom
                    addLineCustom(lineNumber, errorLine);
                } else {
                    updateLines(lineNumber, lastReg, errorLine);
                    linePosition = existInLinesArray(lineNumber, lastReg);
                    if (!linesArray[linePosition].gates) {
                        linesArray[linePosition].gates = [];
                    }
                    checkNotMeasure(linePosition, errorLine);
                    linesArray[linePosition].gates.push(newGate());
                    if (lastQasmName == 'measure' || lastQasmName == 'bloch') {
                        hasMeasure = true;
                    }
                }
        }
    }

    function addLineBarrier(lineNumber, errorLine) {
        lineNumber = calculateTotalLine(lineNumber);
        linePosition = 0;

        if (barrier_init == false) {
            barrier_init = true;
            updateLines(0, undefined, errorLine);
            if (!linesArray[linePosition].gates) {
                linesArray[linePosition].gates = [];
            }
            checkNotMeasure(lineNumber, errorLine);
            var gateArray = linesArray[linePosition].gates;
            gateArray.push(newGate());
            gateObj = gateArray.pop();
            gateObj['affectedLines'] = [];
        } else {
            checkNotMeasure(lineNumber, errorLine);
            var gateArray = linesArray[0].gates;
            gateObj = gateArray.pop();
        }
        gateObj.affectedLines[lineNumber] = true;
        gateArray.push(gateObj);
        linesArray[linePosition].gates = gateArray;
        lastLine = 999; //nothing under a barrier

    }

    function addLineCustom(lineNumber, errorLine) {
        customGateLine.push({
            name: lastReg,
            line: lineNumber
        });
        linesLen = gateDefinitions[lastQasmName].lines ? gateDefinitions[lastQasmName].lines.length : 0;
        paramsLen = 0;

        if (gateDefinitions[lastQasmName].params) {
            paramsLen = gateDefinitions[lastQasmName].params ? gateDefinitions[lastQasmName].params.length : 0;
        }
        if (customGateLine && (customGateLine.length == linesLen) && customGateParams && (customGateParams.length == paramsLen)) {
            var params = [];
            var lineParams = [];
            for (var i = 0; i < paramsLen; i++) {
                params.push({
                    name: gateDefinitions[lastQasmName].params[i],
                    value: customGateParams[i]
                });
            }

            var firstLineNumber = 999;
            var firstLineArray = 0;
            var lastLineNumber = 0;
            var firstLineNumber = 9999;
            var lowestReg = lastReg;
            var lowestLineNumber = 0;

            for (var i = 0; i < linesLen; i++) {

                if (existInRegsList(regList, customGateLine[i].name) >= 0) {
                    throw new parseError('ERROR: incorrect qargs in gate' + lastQasmName, errorLine);
                }
                indexLinesArray = existInLinesArray(customGateLine[i].line, customGateLine[i].name);
                var lineObject = {
                    name: gateDefinitions[lastQasmName].lines[i],
                    value: indexLinesArray
                };
                lineParams.push(lineObject);
            }

            var gatePosition = gateList.indexOf(lastQasmName);
            var gateName = lastQasmName;
            if (gatePosition >= 0) {
                gateName = gateListName[gatePosition];
            }

            if ((['u3', 'u2', 'u1', 'U1', 'U2', 'U3'].indexOf(lastQasmName) >= 0) && !(gateDefinitions[lastQasmName].qasmDefinition)) {
                var totalLine = calculateTotalLine(lineNumber);
                updateLines(lineNumber, lastReg, errorLine);
                const pepito = {
                    name: gateName,
                    qasm: lastQasmName,
                    position: nColum
                };
                pepito.params = params;
                if (!linesArray[totalLine].gates) {
                    linesArray[totalLine].gates = [];
                }
                checkNotMeasure(totalLine, errorLine);
                linesArray[totalLine].gates.push(newCustomGate(pepito));
            } else {
                updateLines(0, undefined, errorLine);
                lastLine = 999;
                var obj = {
                    name: gateName,
                    qasm: lastQasmName,
                    position: nColum
                };
                obj.lineParams = lineParams;
                if (paramsLen > 0) {
                    obj.params = params;
                }
                if (!linesArray[firstLineArray].gates) {
                    linesArray[firstLineArray].gates = [];
                }
                for (var i = 0; i < lineParams.length; i++) {
                    var usedLine = calculateTotalLine(lineParams[i].value, lineParams[i].name);
                    checkNotMeasure(usedLine, errorLine);
                }
                linesArray[firstLineArray].gates.push(newCustomGate(obj));
            }

            customGateParams = [];
            customGateLine = [];
            params = {};
            lineParams = [];
        } else if ((customGateLine && (customGateLine.length > linesLen)) || (customGateParams && (customGateParams.length > paramsLen))) {
            throw new parseError('Number of arguments in gate ' + lastQasmName + ' is invalid', errorLine);
        }
    }


    function newCustomGate(obj) {

        if (Object.keys(conditional).length > 0) {
            line = conditional.line;
            if (lastLine < line) {
                lastLine = line;
            }
            var if_object = conditional;
            conditional = {};
        }

        if (if_object) {
            var gate_properties = obj;
            obj = {};
            obj.name = 'if';
            obj.qasm = 'if';
            obj.position = gate_properties.position;
            obj.if = {
                gate: gate_properties,
                line: if_object.line,
                value: if_object.value,
            }
        }

        return JSON.parse(JSON.stringify(obj));

    }


    function order() {
        linesArray.sort(function (a, b) {
            return (a.line > b.line) ? 1 : ((b.line > a.line) ? -1 : 0);
        });
    }

    function existInRegsList(list, name) {
        for (var i = 0; i < list.length; i++) {
            if (list[i].name == name) {
                return i;
            }
        }
        return -1;
    }

    function declare_qreg(qregName, qregSize, errorLine) {
        var position = existInRegsList(qregList, qregName);
        if (position < 0) {
            qregList.push({
                name: qregName,
                size: qregSize
            });
        } else {
            throw new parseError('QReg ' + qregName + ' is already defined', errorLine);
        }
        save_reg(qregName, qregSize);

    }

    function save_reg(regName, regSize) {
        for (var i = 0; i < regSize; i++) {
            linesArray.push({
                name: regName,
                line: i
            });
        }
    }

    function declare_reg(regName, regSize, errorLine) {
        var position = existInRegsList(regList, regName);
        if (position < 0) {
            regList.push({
                name: regName,
                size: 1,
                bits: parseInt(regSize)
            });
        } else {
            throw new parseError('CReg ' + regName + ' is already defined', errorLine);
        }
        save_reg(regName, 1);
    }

    function check_register(register, line, errorLine) { //check register is defined and line is < than size
        var list = qregList.concat(regList);
        var position = existInRegsList(list, register);
        if (position < 0) {
            throw new parseError('Register ' + register + ' is not defined', errorLine);
        } else if (list[position].bits > 0) {
            sz = list[position].bits;
        } else {
            sz = list[position].size
        }

        if (parseInt(line) >= parseInt(sz)) {
            throw new parseError('Register ' + register + ' index ' + line + ' should be less than ' + sz, errorLine);
        } else {
            return position;
        }
    }

    function check_gate(name, errorLine) {
        var allGates = gateList.concat(customGatesList);
        var lowerCaseNames = allGates.map(function (value) {
            return value.toLowerCase();
        });
        var position = allGates.indexOf(name);
        if (position < 0) {
            throw new parseError('Gate ' + name + ' is not defined', errorLine);
        } else {
            name = allGates[position];
        }
    }

    function add_gate(name, errorLine) {
        if ((gateList.indexOf(name) < 0)) {
            if ((customGatesList.indexOf(name) < 0)) {
                customGatesList.push(name);
            } else {
                throw new parseError('Gate ' + name + ' is already defined', errorLine);
            }
        } else {
            throw new parseError('Gate ' + name + ' is already defined (predefined gate)', errorLine);
        }
    }

    function saveGateDefinition(name, object) {
        if (gateList.indexOf(name) == -1) {
            var qasmBody = object.qasm;
            var newQasm = 'gate ' + name + ' ';
            if (object.params) {
                newQasm += '(';
                for (var i = 0; i < object.params.length; i++) {
                    if (i != 0) {
                        newQasm += ', ';
                    }
                    newQasm += object.params[i];
                }
                newQasm += ') ';
            }
            for (var i = 0; i < object.lines.length; i++) {
                if (i != 0) {
                    newQasm += ',';
                }
                newQasm += object.lines[i];
            }
            object.qasmDefinition = newQasm + ' {\n' + qasmBody + '}';
            object.qasm = name;
            gateDefinitions[name] = object;
        }
    }

    function saveOpaqueDefinition(name, object) {
        if (gateList.indexOf(name) == -1) {
            var newQasm = 'opaque ' + name + ' ';
            if (object.params) {
                newQasm += '(';
                for (var i = 0; i < object.params.length; i++) {
                    if (i != 0) {
                        newQasm += ', ';
                    }
                    newQasm += object.params[i];
                }
                newQasm += ') ';
            }
            for (var i = 0; i < object.lines.length; i++) {
                if (i != 0) {
                    newQasm += ',';
                }
                newQasm += object.lines[i];
            }
            object.qasmDefinition = newQasm;
            object.qasm = name;
            gateDefinitions[name] = object;
        }
    }

    function measureCreg(reg1, reg2, errorLine) {

        var position1 = existInRegsList(qregList, reg1);
        var position2 = existInRegsList(regList, reg2);
        if ((position1 >= 0) && (position2 >= 0)) {
            if (qregList[position1].size == regList[position2].bits) {
                for (var i = 0; i < qregList[position1].size; i++) {
                    lastReg = qregList[position1].name;
                    addLine(i, errorLine);
                    lastReg = regList[position2].name;
                    addLine(i, errorLine);
                }
            } else {
                throw new parseError('Measurement registers have unequal size', errorLine);
            }
        } else {
            if (position1 < 0) {
                if (existInRegsList(regList, reg1) >= 0) {
                    throw new parseError('Register ' + reg1 + ' can not be used as qreg because is a creg', errorLine);
                } else {
                    throw new parseError('Register ' + reg1 + ' can not be used as qreg because is not defined', errorLine);
                }
            }
            if (position2 < 0) {
                if (existInRegsList(qregList, reg2) >= 0) {
                    throw new parseError('Register ' + reg2 + ' can not be used as creg because is a qreg', errorLine);
                } else {
                    throw new parseError('Register ' + reg2 + ' can not be used as qreg because is not defined', errorLine);
                }
            }
        }
    }

    function addAllRegs(regName, errorLine) {

        var list = qregList.concat(regList);
        var position = existInRegsList(list, regName);
        var conditional_aux = conditional;
        if (position >= 0) {
            lastReg = list[position].name;
            for (var i = 0; i < list[position].size; i++) {
                if (lastQasmName != 'barrier') {
                    conditional = conditional_aux;
                }
                addLine(i, errorLine);
            }
        } else {
            throw new parseError('Register ' + regName + ' is not defined', errorLine);
        }
    }

    function addAllRegsCx1(regname, regname2, errorLine) {
        var list = qregList.concat(regList);
        var position1 = existInRegsList(list, regname);
        var position2 = existInRegsList(list, regname2);
        var conditional_aux = conditional;
        if ((list[position1].size == list[position2].size) && (position2 >= 0)) {
            for (var i = 0; i < list[position1].size; i++) {
                conditional = conditional_aux;
                lastReg = regname;
                addLine(i, errorLine);
                lastReg = regname2;
                addLine(i, errorLine);
            }
        }
    }

    function addAllRegsCx2(regname, regname2, num, errorLine) {
        cxInitialised = -1;
        var list = qregList.concat(regList);
        var position = existInRegsList(list, regname);
        var conditional_aux = conditional;
        if (list[position].size >= 0) {
            for (var i = 0; i < list[position].size; i++) {
                conditional = conditional_aux;
                lastReg = regname;
                addLine(i, errorLine);
                lastReg = regname2;
                addLine(num, errorLine);
            }
        }
    }

    function addAllRegsCx3(regname1, num, regname2, errorLine) {
        cxInitialised = -1;
        var list = qregList.concat(regList);
        var position = existInRegsList(list, regname2);
        var conditional_aux = conditional;
        if (list[position].size >= 0) {
            for (var i = 0; i < list[position].size; i++) {
                3
                conditional = conditional_aux;
                lastReg = regname1;
                addLine(num, errorLine);
                lastReg = regname2;
                addLine(i, errorLine);
            }
        }
    }

    function check_body_args(argsList, errorLine) {
        var declaredArgs = [];
        for (var i = 0; i < argsList.length; i++) {
            if (declaredArgs.indexOf(argsList[i]) >= 0) {
                throw new parseError('Repeated arguments (' + argsList[i] + ') found in gate definition', errorLine);
            }
            declaredArgs.push(argsList[i]);
        }
        for (var i = 0; i < usedArgs.length; i++) {
            var error = true;
            for (var j = 0; j < argsList.length; j++) {
                if (usedArgs[i] == argsList[j]) {
                    error = false;
                }
            }
            if (error) {
                throw new parseError('Register ' + usedArgs[i] + ' is not defined', errorLine);
            }
        }
        usedArgs = [];
    }

    function check_body_params(paramsList, errorLine) {
        // console.log(paramsList, usedParams);
        for (var i = 0; i < usedParams.length; i++) {
            var n = usedParams[i];
            if ((paramsList.indexOf(n) < 0) && !(!isNaN(parseFloat(n)) && isFinite(n))) {
                if (paramsRelation[n]) {
                    var list = paramsRelation[n];
                    for (var j = 0; j < list.length; j++) {
                        if (paramsList.indexOf(list[j]) < 0) {
                            throw new parseError('Parameter ' + n + ' is not defined in gate definition', errorLine);
                        }
                    }
                } else {
                    // throw new parseError('Param ' + n + ' is not defined in gate definition', errorLine);
                }
            }
        }
        usedParams = [];
        paramsRelation = {};
    }


    function getFromPrevious(mArray, i) {
        var filtered = mArray.filter(function (element) {
            return element.line === i;
        });
        return filtered.length ? filtered[0] : undefined;
    }

    function fillWithEmptyLines(previousArray, numLines) {
        var newArray = [];
        for (var i = 0; i < numLines; i++) {
            var line = getFromPrevious(previousArray, i);
            if (!line) {
                line = {
                    line: i,
                    name: 'q',
                    gates: []
                };
            }
            newArray.push(line);
        }
        return newArray;
    }

    function calculateConditional(creg, value, errorLine) {
        if (existInRegsList(regList, creg) < 0) {
            throw new parseError('CReg ' + creg + ' is not defined', errorLine);
        }
        lastReg = creg;
        var line = calculateTotalLine(0);
        conditional = {
            line: line,
            value: value
        };
    }

    function transformRegList(regList) {
        for (var i = 0; i < regList.length; i++) {
            var obj = regList[i];
            regList[i] = {
                name: obj.name,
                size: obj.bits
            };
        }
        return regList;
    }

    function transformQRegList(qregList) {
        for (var i = 0; i < qregList.length; i++) {
            qregList[i].size = parseInt(qregList[i].size);
        }
        return qregList;
    }

    function addQargsList(lineNumber, errorLine) {
        if (lineNumber) {
            qargsList.list.push({
                reg: lastReg,
                line: true,
                number: lineNumber
            });
        } else {
            var position = existInRegsList(qregList, lastReg);
            var size = qregList[position].size;
            if (qargsList.size > 1) {
                if (size != qargsList.size) {
                    var errorMessage = ' Have: ';
                    for (var i = 0; i < qargsList.list.length; i++) {
                        errorMessage += qargsList.list[i].reg + '[' + qargsList.size + '], '
                    }
                    errorMessage += lastReg + '[' + size + ']';
                    throw new parseError('Registers in gate ' + lastQasmName + ' should have the same size.' + errorMessage, errorLine);
                }
            } else {
                qargsList.size = size;
            }
            qargsList.list.push({
                reg: lastReg,
                line: false
            });
        }
    }

    function addCustomRegs(errorLine) {
        var params = [];
        if (customGateParams.length > 0) {
            params = customGateParams;
        }
        var aux_conditional = conditional;
        for (var i = 0; i < qargsList.size; i++) {
            for (var j = 0; j < qargsList.list.length; j++) {
                lastReg = qargsList.list[j].reg;
                conditional = aux_conditional;
                customGateParams = params;
                if (qargsList.list[j].line) {
                    addLine(qargsList.list[j].number, errorLine);
                } else {
                    addLine(i, errorLine);
                }
            }
        }

        customGateParams = [];
        qargsList.size = 1;
        qargsList.list = [];
    }

    function check_qreg(qreg, errorLine) {
        var pos = existInRegsList(qregList, qreg);
        if (pos == -1) {
            if (existInRegsList(regList, qreg) < 0) {
                throw new parseError('Register ' + qreg + ' can not be used as qreg because is not defined', errorLine);
            } else {
                throw new parseError('Register ' + qreg + ' can not be used as qreg because is a creg', errorLine);
            }
        }
    }

    function initGateList(input) {
        if (input) {
            if (input.disableOperations) {
                disableOperations = true;
            }
            if (input.disableSubroutine) {
                disableSubroutine = true;
            }
            if ((customGatesList.length == 0) && (include)) {
                defineSubroutines(input.gates);
            }
            if (input.matrix) {
                cxMatrix = input.matrix;
            }
            if (input.measureBlock) {
                measureBlock = true;
            }
        }
    }

    function defineSubroutines(subroutines) {
        for (var i = 0; i < subroutines.length; i++) {
            if ((!disableSubroutine) || !(subroutines[i].type == 'subroutine')) {
                gateList.push(subroutines[i].qasm);
                gateListName.push(subroutines[i].name);
                if (subroutines[i].definition) {
                    var sub = subroutines[i];
                    definitedSubroutines.push(sub.qasm);
                    customGatesList.push(sub.qasm);
                    var obj = {};
                    if (sub.definition.lines) {
                        obj.lines = sub.definition.lines;
                    }
                    if (sub.definition.params) {
                        obj.params = sub.definition.params;
                    }
                    gateDefinitions[sub.qasm] = obj;
                } else if (subroutines[i].params) {
                    var sub = subroutines[i];
                    definitedSubroutines.push(sub.qasm);
                    customGatesList.push(sub.qasm);
                    var obj = {
                        lines: ['q']
                    };
                    if (sub.params) {
                        obj.params = sub.params;
                    }

                    gateDefinitions[sub.qasm] = obj;

                }
            }
        }
    }

    function check_regs(list, errorLine) {
        if ((gateList.indexOf(lastQasmName) == -1) || (definitedSubroutines.indexOf(lastQasmName) >= 0)) {
            if (list && gateDefinitions[lastQasmName].lines && (list.length != gateDefinitions[lastQasmName].lines.length)) {
                throw new parseError('Gate ' + lastQasmName + ' should have ' + gateDefinitions[lastQasmName].lines.length + ' arguments (was given ' + list.length + ')', errorLine);
            }
        } else {
            if (list && (list.length != 1)) {
                // throw new parseError('Arguments number in gate ' + lastQasmName + ' is not correct', errorLine);
                throw new parseError('Gate ' + lastQasmName + ' should have 1 argument (was given' + list.length + ')', errorLine);
            }
        }
        var auxList = [];
        for (var i = 0; i < list.length; i++) {
            for (var j = 0; j < auxList.length; j++) {
                if ((auxList[j].regName === list[i].regName) && (auxList[j].line === list[i].line)) {
                    throw new parseError('Repeated arguments (' + auxList[j].regName + '[' + auxList[j].line + ']) found in gate ' + lastQasmName, errorLine);
                }
            }
            auxList.push(list[i]);
        }
    }

    function transformGateDefinition(object) {
        var gatesList = Object.keys(object);
        var gateDefinitionList = [];
        var obj = {};
        for (var i = 0; i < gatesList.length; i++) {
            if (definitedSubroutines.indexOf(gatesList[i]) < 0) {
                var oldObj = object[gatesList[i]];
                var gateDefinitionObj = {};
                if ((oldObj.params) && (oldObj.params.length > 0)) {
                    gateDefinitionObj.params = oldObj.params;
                }
                gateDefinitionObj.lines = oldObj.lines;
                obj = {
                    name: gatesList[i],
                    qasm: gatesList[i],
                    qasmDefinition: oldObj.qasmDefinition,
                    gateDefinition: gateDefinitionObj,
                }
                gateDefinitionList.push(JSON.parse(JSON.stringify(obj)));
            }
        }
        return gateDefinitionList;
    }

    function check_params(list, errorLine) {
        if (((gateList.indexOf(lastQasmName) == -1) || (customGatesList.indexOf(lastQasmName) >= 0)) && (gateDefinitions[lastQasmName].params)) {
            if (list.length != gateDefinitions[lastQasmName].params.length) {
                throw new parseError('Arguments number in gate  ' + lastQasmName + ' is not correct', errorLine);
            }
        } else {
            if (list.length != 0) {
                throw new parseError('Arguments number in gate  ' + lastQasmName + '  is not correct', errorLine);
            }
        }
    }

    function makeParamRelation(params, real) {
        if (params.length > 0) {
            paramsRelation[real] = params;
        }
    }

    function body_check_params(name, lines, params, errorLine) {
        var linesUsed = []
        for (var i = 0; i < lines.length; i++) {
            if (linesUsed.indexOf(lines[i]) >= 0) {
                throw new parseError('Repeated arguments (' + lines[i] + ') found in gate ' + name, errorLine);
            }
            linesUsed.push(lines[i]);
        }
        if ((gateList.indexOf(name) < 0) || (definitedSubroutines.indexOf(name) >= 0)) {
            if (params) {
                if (!gateDefinitions[name].params) {
                    throw new parseError('Number of parameters in ' + name + ' is invalid. Was given ' + params.length + ' and should be 0.', errorLine);
                }
                if (params.length != gateDefinitions[name].params.length) {
                    throw new parseError('Number of parameters in ' + name + ' is invalid. Was given ' + params.length + ' and should be ' + gateDefinitions[name].params.length + '.', errorLine);
                }
            }
            if (lines.length != gateDefinitions[name].lines.length) {
                throw new parseError('Number of registers in ' + name + ' is invalid. Was given ' + lines.length + ' and should be ' + gateDefinitions[name].lines.length + '.', errorLine);
            }
        } else {
            if (lines.length != 1) {
                throw new parseError('Number of registers in ' + name + ' is invalid. Was given ' + lines.length + ' and should be 1.', errorLine);
            }
            if (params) {
                throw new parseError('Number of parameters in ' + name + ' is invalid. Was given ' + params.length + ' and should be 0.', errorLine);
            }
        }

    }

    function check_measure_regs(qreg, creg, errorLine) {
        // var exist1 = existInRegsList(qregList, qreg);
        // var exist2 = existInRegsList(regList, creg);
        if (existInRegsList(qregList, qreg) < 0) {
            if (existInRegsList(regList, qreg) < 0) {
                throw new parseError('Registers in measure are invalid. Register ' + qreg + ' can not be used as qreg because is not defined', errorLine);
            } else {
                throw new parseError('Registers in measure are invalid. Register ' + qreg + ' can not be used as qreg because is a creg', errorLine);
            }
        }
        if (existInRegsList(regList, creg) < 0) {
            if (existInRegsList(qregList, creg) < 0) {
                throw new parseError('Registers in measure are invalid. Register ' + creg + ' can not be used as creg because is not defined', errorLine);
            } else {
                throw new parseError('Registers in measure are invalid. Register ' + creg + ' can not be used as creg because is a qreg', errorLine);
            }
        }
    }

    function check_limit(expression, errorLine) {
        if (typeof expression == 'string') {
            if (expression.length > 100) {
                throw new parseError('Expression length should be less than 100', errorLine);
            }
        }
    }

    function checkOperationsDisable(errorLine) {
        if (disableOperations) {
            throw new parseError('Operations are disabled', errorLine);
        }
    }

    function checkSubroutinesDisable() {
        if (disableSubroutine) {
            return true;
        }
        return false;
    }

    function parseError(mess, errorLine) {
        //@1.first_line
        var _parseError = {
            message: mess
        };
        if (errorLine) {
            _parseError.hash = {
                loc: {
                    first_line: errorLine,
                }
            }
        }
        return _parseError;
    }

    function checkParams(strings, errorLine) {
        if (strings.length > 0) {
            throw new parseError('Param is not enabled', errorLine);
        }
    }

    function check_cx_args(argsList, errorLine) {
        if (argsList.length != 2) {
            throw new parseError('Number of registers in cx is invalid. Was given ' + argsList.length + ' and should be 2', errorLine);
        } else {
            if (argsList[0] == argsList[1]) {
                throw new parseError('Repeated arguments (' + argsList[1] + ') found in gate cx', errorLine);
            }
        }
    }

    function makeCxGate(argsList, errorLine) {
        argsList.reverse();
        check_cx_args(argsList, errorLine);
        if (!argsList[0].line && !argsList[1].line) {
            addAllRegsCx1(argsList[0].regName, argsList[1].regName, errorLine);
        } else if (!argsList[0].line && argsList[1].line) {
            addAllRegsCx2(argsList[0].regName, argsList[1].regName, argsList[1].line, errorLine);
        } else if (argsList[0].line && !argsList[1].line) {
            addAllRegsCx3(argsList[0].regName, argsList[0].line, argsList[1].regName, errorLine);
        } else {
            lastReg = argsList[0].regName;
            addLine(parseInt(argsList[0].line), errorLine);
            lastReg = argsList[1].regName;
            addLine(parseInt(argsList[1].line), errorLine);
        }

    }

    function checkValidIdentifier(identifier, errorLine) {
        var character = identifier[0];
        if (character !== character.toLowerCase()) {
            throw new parseError('Identifiers must begin with a lowercase letter', errorLine);
        }
    }

    /* generated by jison-lex 0.3.4 */
    var lexer = (function () {
        var lexer = ({

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function (input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function () {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function (ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0) +
                        oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function () {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function () {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });

                }
                return this;
            },

            // retain first n characters of the match
            less: function (n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function () {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function () {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function () {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function (match, indexed_rule) {
                var token,
                    lines,
                    backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ?
                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function () {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token,
                    match,
                    tempMatch,
                    index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: {},
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        /* skip whitespace */
                        break;
                    case 1:
                        /* skip comments */
                        break;
                    case 2:
                        /* skip comment */
                        break;
                    case 3:
                        return 50
                        break;
                    case 4:
                        return 49
                        break;
                    case 5:
                        return 47
                        break;
                    case 6:
                        return 48
                        break;
                    case 7:
                        return 41
                        break;
                    case 8:
                        return 46
                        break;
                    case 9:
                        return 45
                        break;
                    case 10:
                        return 54
                        break;
                    case 11:
                        return 63
                        break;
                    case 12:
                        return 15
                        break;
                    case 13:
                        return 19
                        break;
                    case 14:
                        return 30
                        break;
                    case 15:
                        return 23
                        break;
                    case 16:
                        return 51
                        break;
                    case 17:
                        return 62
                        break;
                    case 18:
                        return 80
                        break;
                    case 19:
                        return 75
                        break;
                    case 20:
                        return 76
                        break;
                    case 21:
                        return 39
                        break;
                    case 22:
                        return 55
                        break;
                    case 23:
                        return 56
                        break;
                    case 24:
                        return 57
                        break;
                    case 25:
                        return 58
                        break;
                    case 26:
                        return 59
                        break;
                    case 27:
                        return 60
                        break;
                    case 28:
                        return 10
                        break;
                    case 29:
                        return 10
                        break;
                    case 30:
                        return 9
                        break;
                    case 31:
                        return 9
                        break;
                    case 32:
                        return 7
                        break;
                    case 33:
                        return 81
                        break;
                    case 34:
                        return 82
                        break;
                    case 35:
                        return 83
                        break;
                    case 36:
                        return 27
                        break;
                    case 37:
                        return 28
                        break;
                    case 38:
                        return 32
                        break;
                    case 39:
                        return 34
                        break;
                    case 40:
                        return 18
                        break;
                    case 41:
                        return 36
                        break;
                    case 42:
                        return 8
                        break;
                    case 43:
                        return 'INVALID'
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:\/\/.*\n)/, /^(?:\/\/.*$)/, /^(?:[-+]?[0-9]+(((\.[0-9]+)?[eE][-+]?[0-9]+)|(\.[0-9]+)))/, /^(?:\d+)/, /^(?:\*)/, /^(?:\/)/, /^(?:->)/, /^(?:-)/, /^(?:\+)/, /^(?:\^)/, /^(?:==)/, /^(?:qreg\b)/, /^(?:creg\b)/, /^(?:gate\b)/, /^(?:opaque\b)/, /^(?:pi\b)/, /^(?:if\b)/, /^(?:measure\b)/, /^(?:reset\b)/, /^(?:barrier\b)/, /^(?:cx\b)/, /^(?:sin\b)/, /^(?:cos\b)/, /^(?:tan\b)/, /^(?:exp\b)/, /^(?:ln\b)/, /^(?:sqrt\b)/, /^(?:include "qelib1\.inc";)/, /^(?:include "qelib1\.inc";)/, /^(?:IBMQASM 2\.0;)/, /^(?:OPENQASM 2\.0;)/, /^(?:clean\b)/, /^(?:[a-zA-Z][a-zA-Z0-9_]{0,30}\b)/, /^(?:\[)/, /^(?:\])/, /^(?:\()/, /^(?:\))/, /^(?:\{)/, /^(?:\})/, /^(?:;)/, /^(?:,)/, /^(?:$)/, /^(?:.)/],
            conditions: {
                "INITIAL": {
                    "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43],
                    "inclusive": true
                }
            }
        });
        return lexer;
    })();
    parser.lexer = lexer;

    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;
    parser.Parser = Parser;
    return new Parser;
})();

module.exports = qasmAnalyzer;

// if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
//     exports.parser = qasmAnalyzer;
//     exports.Parser = qasmAnalyzer.Parser;
//     exports.parse = function () {
//         console.log("PARSING!!!!")


//         return qasmAnalyzer.parse.apply(qasmAnalyzer, arguments);
//     };
//     exports.main = function commonjsMain(args) {
//         if (!args[1]) {
//             console.log('Usage: ' + args[0] + ' FILE');
//             process.exit(1);
//         }
//         var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
//         return exports.parser.parse(source);
//     };
//     if (typeof module !== 'undefined' && require.main === module) {
//         exports.main(process.argv.slice(1));
//     }
// }