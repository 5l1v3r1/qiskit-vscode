/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var qasm = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,11],$V2=[1,12],$V3=[1,19],$V4=[1,18],$V5=[1,32],$V6=[1,25],$V7=[1,26],$V8=[1,30],$V9=[1,29],$Va=[1,31],$Vb=[1,28],$Vc=[5,23,28,29],$Vd=[2,5,18,23,24,28,29,44,46,48,70,72,73],$Ve=[1,47],$Vf=[2,73],$Vg=[24,34],$Vh=[2,28],$Vi=[11,38,71],$Vj=[1,62],$Vk=[11,38],$Vl=[1,88],$Vm=[1,89],$Vn=[11,38,40],$Vo=[1,106],$Vp=[1,107],$Vq=[1,109],$Vr=[1,112],$Vs=[35,38],$Vt=[24,42,44,46,48],$Vu=[1,137],$Vv=[1,136],$Vw=[1,140],$Vx=[1,134],$Vy=[1,135],$Vz=[1,138],$VA=[1,143],$VB=[1,149],$VC=[1,150],$VD=[35,38,51],$VE=[1,151],$VF=[1,152],$VG=[35,38,51,53,54],$VH=[35,38,51,53,54,56,57];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"StartProgram":3,"MainProgram":4,"EOF":5,"IbmDefinition":6,"Program":7,"Library":8,"IBMQASM":9,"REAL":10,";":11,"Include":12,"include":13,"QELIB.INC":14,"Declaration":15,"Statement":16,"QOperation":17,"Magic":18,"\\n":19,"QRegDeclaration":20,"CRegDeclaration":21,"GateDeclaration":22,"QREG":23,"ID":24,"[":25,"INT":26,"]":27,"CREG":28,"GATE":29,"Id":30,"GateScope":31,"BitList":32,"GateBody":33,"(":34,")":35,"GateIdList":36,"Gate":37,",":38,"Bit":39,"{":40,"GateOpList":41,"}":42,"GateOp":43,"U":44,"ExpList":45,"CX":46,"IdList":47,"BARRIER":48,"Expression":49,"MultiplicativeExpression":50,"^":51,"AdditiveExpression":52,"*":53,"/":54,"PrefixExpression":55,"+":56,"-":57,"Unary":58,"PI":59,"UnitaryOperation":60,"Opaque":61,"Measure":62,"Barrier":63,"Reset":64,"ExprList":65,"Primary":66,"PrimaryList":67,"ExpressionList":68,"IndexedId":69,"MEASURE":70,"->":71,"RESET":72,"OPAQUE":73,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"IBMQASM",10:"REAL",11:";",13:"include",14:"QELIB.INC",18:"Magic",19:"\\n",23:"QREG",24:"ID",25:"[",26:"INT",27:"]",28:"CREG",29:"GATE",34:"(",35:")",38:",",40:"{",42:"}",44:"U",46:"CX",48:"BARRIER",51:"^",53:"*",54:"/",56:"+",57:"-",59:"PI",65:"ExprList",68:"ExpressionList",70:"MEASURE",71:"->",72:"RESET",73:"OPAQUE"},
productions_: [0,[3,2],[4,1],[4,2],[4,1],[6,4],[6,3],[12,3],[8,1],[8,2],[7,1],[7,2],[16,1],[16,2],[16,2],[16,2],[16,2],[15,1],[15,1],[15,1],[20,6],[21,6],[22,5],[22,7],[22,8],[36,1],[36,3],[37,1],[31,0],[32,1],[32,3],[39,1],[33,3],[33,2],[41,1],[41,2],[43,6],[43,5],[43,3],[43,5],[43,6],[43,3],[45,1],[45,3],[49,1],[49,3],[50,1],[50,3],[50,3],[52,1],[52,3],[52,3],[55,1],[55,2],[55,2],[58,1],[58,1],[58,1],[58,1],[58,3],[58,4],[17,1],[17,1],[17,1],[17,1],[17,1],[60,6],[60,4],[60,2],[60,4],[60,5],[66,1],[66,1],[30,1],[67,1],[67,3],[69,4],[63,2],[62,4],[47,1],[47,3],[64,2],[61,4],[61,6],[61,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */, qelibParsed) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return buildCompilationResult(buildNonTerminalNode('PROGRAM', $$[$0-1])); 
break;
case 2: case 4:
 this.$ = buildNonTerminalNode('MAIN-PROGRAM', $$[$0]); 
break;
case 3:
 this.$ = buildNonTerminalNode('MAIN-PROGRAM', $$[$0-1], $$[$0]); 
break;
case 5:
 
        this.$ = buildNonTerminalNode('IBM-DEFINITION',
            buildTerminalNode('IBMQASM', $$[$0-3], _$[$0-3]),
            buildTerminalNode('REAL', $$[$0-2], _$[$0-2]),
            buildTerminalNode('PUNCT', $$[$0-1], _$[$0-1]),
            buildNonTerminalNode('INCLUDE', $$[$0])
        ); 
    
break;
case 6:
 
        this.$ = buildNonTerminalNode('IBM-DEFINITION',
            buildTerminalNode('IBMQASM', $$[$0-2], _$[$0-2]),
            buildTerminalNode('REAL', $$[$0-1], _$[$0-1]),
            buildTerminalNode('PUNCT', $$[$0], _$[$0])
        ); 
    
break;
case 7:
 
        this.$ = buildNonTerminalNode('INCLUDE-DEFINITION', 
            buildTerminalNode('INCLUDE', $$[$0-2], _$[$0-2]),
            buildTerminalNode('LIB', $$[$0-1], _$[$0-1]),
            buildTerminalNode('PUNCT', $$[$0], _$[$0])   
        ); // TODO: Support include in parser
    
break;
case 8:
 this.$ = buildNonTerminalNode('LIBRARY', $$[$0]); 
break;
case 9:
 this.$ = buildNonTerminalNode('LIBRARY', $$[$0-1], $$[$0]); 
break;
case 10:
 this.$ = buildNonTerminalNode('PROGRAM', $$[$0]); 
break;
case 11:
 this.$ = buildNonTerminalNode('PROGRAM', $$[$0-1], $$[$0]); 
break;
case 12:
 this.$ = buildNonTerminalNode('STATEMENT', $$[$0]); 
break;
case 13: case 14:

        this.$ = buildNonTerminalNode('STATEMENT', 
            $$[$0-1],
            buildTerminalNode('PUNCT', $$[$0], _$[$0])
        );
    
break;
case 17: case 18: case 19:
 this.$ = buildNonTerminalNode('DECLARATION', $$[$0]); 
break;
case 20:

        this.$ = buildNonTerminalNode('QREG-DECLARATION', 
            buildTerminalNode('QREG', $$[$0-5], _$[$0-5]),
            buildTerminalNode('ID', $$[$0-4], _$[$0-4]),
            buildTerminalNode('PUNCT', $$[$0-3], _$[$0-3]),
            buildTerminalNode('INT', $$[$0-2], _$[$0-2]),
            buildTerminalNode('PUNCT', $$[$0-1], _$[$0-1]),
            buildTerminalNode('PUNCT', $$[$0], _$[$0])
        );
    
break;
case 21:

        this.$ = buildNonTerminalNode('CREG-DECLARATION',
            buildTerminalNode('CREG', $$[$0-5], _$[$0-5]),
            buildTerminalNode('ID', $$[$0-4], _$[$0-4]),
            buildTerminalNode('PUNCT', $$[$0-3], _$[$0-3]),
            buildTerminalNode('INT', $$[$0-2], _$[$0-2]),
            buildTerminalNode('PUNCT', $$[$0-1], _$[$0-1]),
            buildTerminalNode('PUNCT', $$[$0], _$[$0])
        );
    
break;
case 22:
 
        this.$ = buildNonTerminalNode('GATE-DECLARATION',
            buildTerminalNode('GATE', $$[$0-4], _$[$0-4]),
            $$[$0-3],
            $$[$0-2],
            $$[$0-1],
            $$[$0]
        );
    
break;
case 23:
 
        this.$ = buildNonTerminalNode('GATE-DECLARATION',
            buildTerminalNode('GATE', $$[$0-6], _$[$0-6]),
            $$[$0-5],
            $$[$0-4],
            buildTerminalNode('PUNCT', $$[$0-3], _$[$0-3]),
            buildTerminalNode('PUNCT', $$[$0-2], _$[$0-2]),
            $$[$0-1],
            $$[$0]
        );
    
break;
case 24:
 
        this.$ = buildNonTerminalNode('GATE-DECLARATION',
            buildTerminalNode('GATE', $$[$0-7], _$[$0-7]),
            $$[$0-6],
            $$[$0-5],
            buildTerminalNode('PUNCT', $$[$0-4], _$[$0-4]),
            $$[$0-3],
            buildTerminalNode('PUNCT', $$[$0-2], _$[$0-2]),
            $$[$0-1],
            $$[$0]
        );
    
break;
case 25:
 this.$ = buildNonTerminalNode('GATE-ID-LIST', $$[$0]); 
break;
case 26:
Â this.$ = buildNonTerminalNode('GATE-ID-LIST', $$[$0-2], $$[$0]); 
break;
case 27:
 this.$ = buildNonTerminalNode('GATE-ID', $$[$0]); 
break;
case 29:
 this.$ = buildNonTerminalNode('BITLIST', $$[$0]); 
break;
case 30:
 this.$ = buildNonTerminalNode('BITLIST', $$[$0-2], $$[$0]); 
break;
case 31:
 this.$ = buildNonTerminalNode('BIT', $$[$0]); 
break;
case 32:

        this.$ = buildNonTerminalNode(
            buildTerminalNode('PUNCT', $$[$0-2], _$[$0-2]),
            $$[$0-1],
            buildTerminalNode('PUNCT', $$[$0], _$[$0])
        );
    
break;
case 33:

        this.$ = buildNonTerminalNode(
            buildTerminalNode('PUNCT', $$[$0-1], _$[$0-1]),
            buildTerminalNode('PUNCT', $$[$0], _$[$0])
        );
    
break;
case 34:
 this.$ = buildNonTerminalNode('GATEOP-LIST', $$[$0]); 
break;
case 35:
 this.$ = buildNonTerminalNode('GATEOP-LIST', $$[$0-1], $$[$0]); 
break;
case 36:

        this.$ = buildNonTerminalNode('GATEOP',
            buildTerminalNode('U', $$[$0-5], _$[$0-5]),
            buildTerminalNode('PUNCT', $$[$0-4], _$[$0-4]),
            $$[$0-3],
            buildTerminalNode('PUNCT', $$[$0-2], _$[$0-2]),
            $$[$0-1],
            buildTerminalNode('PUNCT', $$[$0], _$[$0])
        );
    
break;
case 37:

        this.$ = buildNonTerminalNode('GATEOP',
            buildTerminalNode('CX', $$[$0-4], _$[$0-4]),
            $$[$0-3],
            buildTerminalNode('PUNCT', $$[$0-2], _$[$0-2]),
            $$[$0-1],
            buildTerminalNode('PUNCT', $$[$0], _$[$0])
        );
    
break;
case 38:

        this.$ = buildNonTerminalNode('GATEOP',
            $$[$0-2],
            $$[$0-1],
            buildTerminalNode('PUNCT', $$[$0], _$[$0])
        );
    
break;
case 39:

        this.$ = buildNonTerminalNode('GATEOP',
            $$[$0-4],
            buildTerminalNode('PUNCT', $$[$0-3], _$[$0-3]),
            buildTerminalNode('PUNCT', $$[$0-2], _$[$0-2]),
            $$[$0-1],
            buildTerminalNode('PUNCT', $$[$0], _$[$0])
        );
    
break;
case 40:

        this.$ = buildNonTerminalNode('GATEOP',
            $$[$0-5],
            buildTerminalNode('PUNCT', $$[$0-4], _$[$0-4]),
            $$[$0-3],
            buildTerminalNode('PUNCT', $$[$0-2], _$[$0-2]),
            $$[$0-1],
            buildTerminalNode('PUNCT', $$[$0], _$[$0])
        );
    
break;
case 41:

        this.$ = buildNonTerminalNode('GATEOP',
            buildTerminalNode('BARRIER', $$[$0-2], _$[$0-2]),
            $$[$0-1],
            buildTerminalNode('PUNCT', $$[$0], _$[$0])
        );
    
break;
case 42:
 this.$ = buildNonTerminalNode('EXPRESSION-LIST', $$[$0]); 
break;
case 43:
 this.$ = buildNonTerminalNode('EXPRESSION-LIST', $$[$0-2], $$[$0]); 
break;
case 44: case 46: case 49:
 this.$ = buildNonTerminalNode('EXPRESSION', $$[$0]); 
break;
case 45:
 this.$ = buildNonTerminalNode('POW', $$[$0-2], $$[$0]); 
break;
case 47:
 this.$ = buildNonTerminalNode('MULTIPLICATION', $$[$0-2], $$[$0]); 
break;
case 48:
 this.$ = buildNonTerminalNode('DIVISION', $$[$0-2], $$[$0]); 
break;
case 50:
 this.$ = buildNonTerminalNode('ADDITION', $$[$0-2], $$[$0]); 
break;
case 51:
 this.$ = buildNonTerminalNode('SUBSTRACTION', $$[$0-2], $$[$0]); 
break;
case 52:
 this.$ = buildNonTerminalNode('PREFIX', $$[$0]); 
break;
case 53: case 54:
 
        this.$ = buildNonTerminalNode('PREFIX', 
            buildTerminalNode('PUNCT', $$[$0-1], _$[$0-1]),
            $$[$0]
        ); 
    
break;
case 55:
 this.$ = buildNonTerminalNode('UNARY', buildTerminalNode('INT', $$[$0], _$[$0])); 
break;
case 56:
 this.$ = buildNonTerminalNode('UNARY', buildTerminalNode('REAL', $$[$0], _$[$0])); 
break;
case 57:
 this.$ = buildNonTerminalNode('UNARY', buildTerminalNode('PI', $$[$0], _$[$0])); 
break;
case 58:
 this.$ = buildNonTerminalNode('UNARY', $$[$0]); 
break;
case 59:
 
        this.$ = buildNonTerminalNode('UNARY', 
            buildTerminalNode('PUNCT', $$[$0-2], _$[$0-2]),
            $$[$0-1],
            buildTerminalNode('PUNCT', $$[$0], _$[$0])
        ); 
    
break;
case 60:
 
        this.$ = buildNonTerminalNode('UNARY', 
            $$[$0-3],
            buildTerminalNode('PUNCT', $$[$0-2], _$[$0-2]),
            $$[$0-1],
            buildTerminalNode('PUNCT', $$[$0], _$[$0])
        ); 
    
break;
case 61: case 62: case 63: case 64: case 65:
 this.$ = buildNonTerminalNode('QOP', $$[$0]); 
break;
case 66:

        this.$ = buildNonTerminalNode('UOP',
            buildTerminalNode('U', $$[$0-5], _$[$0-5]),
            buildTerminalNode('PUNCT', $$[$0-4], _$[$0-4]),
            $$[$0-3],
            buildTerminalNode('PUNCT', $$[$0-2], _$[$0-2]),
            $$[$0-1],
            buildTerminalNode('PUNCT', $$[$0], _$[$0])
        );
    
break;
case 67:

        this.$ = buildNonTerminalNode('UOP',
            buildTerminalNode('CX', $$[$0-3], _$[$0-3]),
            $$[$0-2], 
            buildTerminalNode('PUNCT', $$[$0-1], _$[$0-1]),
            $$[$0]
        );
    
break;
case 68:
 this.$ = buildNonTerminalNode('UOP', $$[$0-1], $$[$0]); 
break;
case 69:

        this.$ = buildNonTerminalNode('UOP',
            $$[$0-3],
            buildTerminalNode('PUNCT', $$[$0-2], _$[$0-2]),
            buildTerminalNode('PUNCT', $$[$0-1], _$[$0-1]),
            $$[$0]
        );
    
break;
case 70:

        this.$ = buildNonTerminalNode('UOP',
            $$[$0-4],
            buildTerminalNode('PUNCT', $$[$0-3], _$[$0-3]),
            $$[$0-2],
            buildTerminalNode('PUNCT', $$[$0-1], _$[$0-1]),
            $$[$0]
        );
    
break;
case 71: case 72:
 this.$ = buildNonTerminalNode('PRIMARY', $$[$0]); 
break;
case 73:
 this.$ = buildTerminalNode('ID', $$[$0], _$[$0]); 
break;
case 74:
 this.$ = buildNonTerminalNode('PRIMARY-LIST', $$[$0]); 
break;
case 75:
 this.$ = buildNonTerminalNode('PRIMARY-LIST', $$[$0-2], $$[$0]); 
break;
case 76:
 
        this.$ = buildNonTerminalNode('INDEXED-ID', 
            buildTerminalNode('ID', $$[$0-3], _$[$0-3]),
            buildTerminalNode('PUNCT', $$[$0-2], _$[$0-2]),
            buildTerminalNode('INT', $$[$0-1], _$[$0-1]),
            buildTerminalNode('PUNCT', $$[$0], _$[$0])
        );
    
break;
case 77:
 
        this.$ = buildNonTerminalNode('BARRIER', 
            buildTerminalNode('BARRIER', $$[$0-1], _$[$0-1]),
            $$[$0]
        );
    
break;
case 78:

        this.$ = buildNonTerminalNode('MEASURE-NODE',
            buildTerminalNode('MEASURE', $$[$0-3], _$[$0-3]),
            $$[$0-2],
            buildTerminalNode('PUNCT', $$[$0-1], _$[$0-1]),
            $$[$0]
        );
    
break;
case 79:
Â this.$ = buildNonTerminalNode('ID-LIST', $$[$0]); 
break;
case 80:
Â this.$ = buildNonTerminalNode('ID-LIST', $$[$0-2], $$[$0]); 
break;
case 81:
 
        this.$ = buildNonTerminalNode('RESET-NODE',
            buildTerminalNode('RESET', $$[$0-1], _$[$0-1]),
            $$[$0]
        );
    
break;
case 82:
 
        this.$ = buildNonTerminalNode('OPAQUE-NODE',
            buildTerminalNode('OPAQUE', $$[$0-3], _$[$0-3]),
            $$[$0-2], 
            $$[$0-1],
            $$[$0]
        ); 
    
break;
case 83:
 
        this.$ = buildNonTerminalNode('OPAQUE-NODE',
            buildTerminalNode('OPAQUE', $$[$0-5], _$[$0-5]),
            $$[$0-4], 
            $$[$0-3],
            buildTerminalNode('PUNCT', $$[$0-2], _$[$0-2]),
            buildTerminalNode('PUNCT', $$[$0-1], _$[$0-1]),
            $$[$0]
        ); 
    
break;
case 84:
 
        this.$ = buildNonTerminalNode('OPAQUE-NODE',
            buildTerminalNode('OPAQUE', $$[$0-6], _$[$0-6]),
            $$[$0-5], 
            $$[$0-4],
            buildTerminalNode('PUNCT', $$[$0-3], _$[$0-3]),
            $$[$0-2],
            buildTerminalNode('PUNCT', $$[$0-1], _$[$0-1]),
            $$[$0]
        ); 
    
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:[1,5],15:6,20:7,21:8,22:9,23:$V0,28:$V1,29:$V2},{1:[3]},{5:[1,13]},{2:$V3,5:[2,2],7:14,15:16,16:15,17:17,18:$V4,20:7,21:8,22:9,23:$V0,24:$V5,28:$V1,29:$V2,30:27,44:$V6,46:$V7,48:$V8,60:20,61:21,62:22,63:23,64:24,70:$V9,72:$Va,73:$Vb},{5:[2,4],15:33,20:7,21:8,22:9,23:$V0,28:$V1,29:$V2},{10:[1,34]},o($Vc,[2,8]),o($Vd,[2,17]),o($Vd,[2,18]),o($Vd,[2,19]),{24:[1,35]},{24:[1,36]},{24:$V5,30:37},{1:[2,1]},{2:$V3,5:[2,3],15:16,16:38,17:17,18:$V4,20:7,21:8,22:9,23:$V0,24:$V5,28:$V1,29:$V2,30:27,44:$V6,46:$V7,48:$V8,60:20,61:21,62:22,63:23,64:24,70:$V9,72:$Va,73:$Vb},o($Vd,[2,10]),o($Vd,[2,12]),{11:[1,39]},{11:[1,40]},{11:[1,41],19:[1,42]},{11:[2,61]},{11:[2,62]},{11:[2,63]},{11:[2,64]},{11:[2,65]},{34:[1,43]},{24:$Ve,30:45,66:44,69:46},{24:$Ve,30:45,34:[1,49],66:50,67:48,69:46},{24:$V5,30:51},{24:$Ve,30:45,66:52,69:46},{24:$Ve,30:45,66:50,67:53,69:46},{24:$Ve,30:45,66:54,69:46},o([11,24,34,35,38,40,51,53,54,56,57],$Vf),o($Vc,[2,9]),{11:[1,55]},{25:[1,56]},{25:[1,57]},o($Vg,$Vh,{31:58}),o($Vd,[2,11]),o($Vd,[2,13]),o($Vd,[2,14]),o($Vd,[2,15]),o($Vd,[2,16]),{65:[1,59]},{38:[1,60]},o($Vi,[2,71]),o($Vi,[2,72]),o($Vi,$Vf,{25:[1,61]}),{11:[2,68],38:$Vj},{35:[1,63],68:[1,64]},o($Vk,[2,74]),o($Vg,$Vh,{31:65}),{71:[1,66]},{11:[2,77],38:$Vj},{11:[2,81]},o($Vd,[2,6],{12:67,13:[1,68]}),{26:[1,69]},{26:[1,70]},{24:$V5,30:74,32:71,34:[1,72],39:73},{35:[1,75]},{24:$Ve,30:45,66:76,69:46},{26:[1,77]},{24:$Ve,30:45,66:78,69:46},{24:$Ve,30:45,66:50,67:79,69:46},{35:[1,80]},{24:$V5,30:74,32:81,34:[1,82],39:73},{24:$Ve,30:45,66:83,69:46},o($Vd,[2,5]),{14:[1,84]},{27:[1,85]},{27:[1,86]},{33:87,38:$Vl,40:$Vm},{24:$V5,30:93,35:[1,90],36:91,37:92},o($Vn,[2,29]),o($Vn,[2,31]),{24:$Ve,30:45,66:94,69:46},{11:[2,67]},{27:[1,95]},o($Vk,[2,75]),{11:[2,69],38:$Vj},{24:$Ve,30:45,66:50,67:96,69:46},{11:[2,82],38:$Vl},{24:$V5,30:93,35:[1,97],36:98,37:92},{11:[2,78]},{11:[1,99]},{11:[1,100]},{11:[1,101]},o($Vd,[2,22]),{24:$V5,30:74,39:102},{24:$V5,30:108,41:103,42:[1,104],43:105,44:$Vo,46:$Vp,48:$Vq},{24:$V5,30:74,32:110,39:73},{35:[1,111],38:$Vr},o($Vs,[2,25]),o($Vs,[2,27]),{11:[1,113]},o($Vi,[2,76]),{11:[2,70],38:$Vj},{24:$V5,30:74,32:114,39:73},{35:[1,115],38:$Vr},o($Vd,[2,7]),o($Vd,[2,20]),o($Vd,[2,21]),o($Vn,[2,30]),{24:$V5,30:108,42:[1,116],43:117,44:$Vo,46:$Vp,48:$Vq},o($Vd,[2,33]),o($Vt,[2,34]),{34:[1,118]},{24:$V5,30:119},{24:$V5,30:122,34:[1,121],47:120},{24:$V5,30:122,47:123},{33:124,38:$Vl,40:$Vm},{24:$V5,30:74,32:125,39:73},{24:$V5,30:93,37:126},{11:[2,66]},{11:[2,83],38:$Vl},{24:$V5,30:74,32:127,39:73},o($Vd,[2,32]),o($Vt,[2,35]),{10:$Vu,24:$V5,26:$Vv,30:139,34:$Vw,45:128,49:129,50:130,52:131,55:132,56:$Vx,57:$Vy,58:133,59:$Vz},{38:[1,141]},{11:[1,142],38:$VA},{10:$Vu,24:$V5,26:$Vv,30:139,34:$Vw,35:[1,144],45:145,49:129,50:130,52:131,55:132,56:$Vx,57:$Vy,58:133,59:$Vz},o($Vk,[2,79]),{11:[1,146],38:$VA},o($Vd,[2,23]),{33:147,38:$Vl,40:$Vm},o($Vs,[2,26]),{11:[2,84],38:$Vl},{35:[1,148],38:$VB},o($Vs,[2,42],{51:$VC}),o($VD,[2,44],{53:$VE,54:$VF}),o($VG,[2,46],{56:[1,153],57:[1,154]}),o($VH,[2,49]),o($VH,[2,52]),{10:$Vu,24:$V5,26:$Vv,30:139,34:$Vw,55:155,56:$Vx,57:$Vy,58:133,59:$Vz},{10:$Vu,24:$V5,26:$Vv,30:139,34:$Vw,55:156,56:$Vx,57:$Vy,58:133,59:$Vz},o($VH,[2,55]),o($VH,[2,56]),o($VH,[2,57]),o($VH,[2,58],{34:[1,157]}),{10:$Vu,24:$V5,26:$Vv,30:139,34:$Vw,49:158,50:130,52:131,55:132,56:$Vx,57:$Vy,58:133,59:$Vz},{24:$V5,30:159},o($Vt,[2,38]),{24:$V5,30:160},{24:$V5,30:122,47:161},{35:[1,162],38:$VB},o($Vt,[2,41]),o($Vd,[2,24]),{24:$V5,30:163},{10:$Vu,24:$V5,26:$Vv,30:139,34:$Vw,49:164,50:130,52:131,55:132,56:$Vx,57:$Vy,58:133,59:$Vz},{10:$Vu,24:$V5,26:$Vv,30:139,34:$Vw,50:165,52:131,55:132,56:$Vx,57:$Vy,58:133,59:$Vz},{10:$Vu,24:$V5,26:$Vv,30:139,34:$Vw,50:166,52:131,55:132,56:$Vx,57:$Vy,58:133,59:$Vz},{10:$Vu,24:$V5,26:$Vv,30:139,34:$Vw,50:167,52:131,55:132,56:$Vx,57:$Vy,58:133,59:$Vz},{10:$Vu,24:$V5,26:$Vv,30:139,34:$Vw,52:168,55:132,56:$Vx,57:$Vy,58:133,59:$Vz},{10:$Vu,24:$V5,26:$Vv,30:139,34:$Vw,52:169,55:132,56:$Vx,57:$Vy,58:133,59:$Vz},o($VH,[2,53]),o($VH,[2,54]),{10:$Vu,24:$V5,26:$Vv,30:139,34:$Vw,49:170,50:130,52:131,55:132,56:$Vx,57:$Vy,58:133,59:$Vz},{35:[1,171],51:$VC},{11:[1,172]},o($Vk,[2,80]),{11:[1,173],38:$VA},{24:$V5,30:122,47:174},{11:[1,175]},o($Vs,[2,43],{51:$VC}),o($VD,[2,45],{53:$VE,54:$VF}),o($VG,[2,47]),o($VG,[2,48]),o($VH,[2,50]),o($VH,[2,51]),{35:[1,176],51:$VC},o($VH,[2,59]),o($Vt,[2,37]),o($Vt,[2,39]),{11:[1,177],38:$VA},o($Vt,[2,36]),o($VH,[2,60]),o($Vt,[2,40])],
defaultActions: {13:[2,1],20:[2,61],21:[2,62],22:[2,63],23:[2,64],24:[2,65],54:[2,81],76:[2,67],83:[2,78],113:[2,66]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


var errors = [];

function toParserLocation(location) {
    return {
        firstLine: location.first_line,
        lastLine: location.last_line,
        firstColumn: location.first_column,
        lastColumn: location.last_column
    };
}

function buildNonTerminalNode(type, ...childs) {
    return {
        type: type,
        terminal: false,
        childs: childs
    };
}

function buildTerminalNode(type, value, location) {
    return {
        type: type,
        terminal: true,
        value: value, 
        location: toParserLocation(location)
    };
}

function buildCompilationResult(asmRootNode) {
    return {
        asm: asmRootNode,
        errors: errors
    };
}

parser.parseError = function parseError(message, hash) {
    errors.push({
        message: message,
        location: toParserLocation(hash.loc)
    });
};

parser.init = function init() {
    errors = [];
};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip whitespace */ // ??
break;
case 2:return 10
break;
case 3:return 26
break;
case 4:return 9
break;
case 5:return 9
break;
case 6:return 13
break;
case 7:return 14
break;
case 8:return 23
break;
case 9:return 28
break;
case 10:return 46
break;
case 11:return 44
break;
case 12:return 70
break;
case 13:return 48
break;
case 14:return 72
break;
case 15:return 73
break;
case 16:return 71
break;
case 17:return 11
break;
case 18:return 38
break;
case 19:return 34
break;
case 20:return 35
break;
case 21:return 40
break;
case 22:return 42
break;
case 23:return 56
break;
case 24:return 57
break;
case 25:return 53
break;
case 26:return 54
break;
case 27:return 29
break;
case 28:return 59
break;
case 29:return 24
break;
case 30:return 25
break;
case 31:return 27
break;
case 32:return 5
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[-]?[0-9]+)/,/^(?:IBMQASM\b)/,/^(?:OPENQASM\b)/,/^(?:include\b)/,/^(?:"qelib1\.inc")/,/^(?:qreg\b)/,/^(?:creg\b)/,/^(?:CX\b)/,/^(?:U\b)/,/^(?:measure\b)/,/^(?:barrier\b)/,/^(?:reset\b)/,/^(?:opaque\b)/,/^(?:->)/,/^(?:;)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:gate\b)/,/^(?:pi\b)/,/^(?:[a-z][a-zA-Z0-9]{0,30}\b)/,/^(?:\[)/,/^(?:\])/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = qasm;
exports.Parser = qasm.Parser;
exports.parse = function () { return qasm.parse.apply(qasm, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}