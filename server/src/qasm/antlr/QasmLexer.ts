// Generated from QasmLexer.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from 'antlr4ts/atn/ATN';
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator';
import { NotNull } from 'antlr4ts/Decorators';
import { Override } from 'antlr4ts/Decorators';
import { RuleContext } from 'antlr4ts/RuleContext';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';

import * as Utils from 'antlr4ts/misc/Utils';


export class QasmLexer extends Lexer {
	public static readonly Comment=1;
	public static readonly WhiteSpace=2;
	public static readonly Real=3;
	public static readonly Int=4;
	public static readonly QasmDescriptor=5;
	public static readonly Include=6;
	public static readonly Qelib=7;
	public static readonly Qreg=8;
	public static readonly Creg=9;
	public static readonly Clean=10;
	public static readonly U=11;
	public static readonly Cx=12;
	public static readonly Sin=13;
	public static readonly Cos=14;
	public static readonly Tan=15;
	public static readonly Exp=16;
	public static readonly Ln=17;
	public static readonly Sqrt=18;
	public static readonly Measure=19;
	public static readonly Barrier=20;
	public static readonly Reset=21;
	public static readonly Opaque=22;
	public static readonly If=23;
	public static readonly Equals=24;
	public static readonly Assign=25;
	public static readonly Semi=26;
	public static readonly Comma=27;
	public static readonly LeftCurlyBrace=28;
	public static readonly RightCurlyBrace=29;
	public static readonly LeftBrace=30;
	public static readonly RightBrace=31;
	public static readonly LeftParen=32;
	public static readonly RightParen=33;
	public static readonly Pow=34;
	public static readonly Mult=35;
	public static readonly Div=36;
	public static readonly Sum=37;
	public static readonly Subs=38;
	public static readonly Pi=39;
	public static readonly Gate=40;
	public static readonly Id=41;
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE"
	];

	public static readonly ruleNames: string[] = [
		"Comment", "WhiteSpace", "Real", "Int", "QasmDescriptor", "Include", "Qelib", 
		"Qreg", "Creg", "Clean", "U", "Cx", "Sin", "Cos", "Tan", "Exp", "Ln", 
		"Sqrt", "Measure", "Barrier", "Reset", "Opaque", "If", "Equals", "Assign", 
		"Semi", "Comma", "LeftCurlyBrace", "RightCurlyBrace", "LeftBrace", "RightBrace", 
		"LeftParen", "RightParen", "Pow", "Mult", "Div", "Sum", "Subs", "Pi", 
		"Gate", "Id"
	];

	private static readonly _LITERAL_NAMES: (string | undefined)[] = [
		undefined, undefined, undefined, undefined, undefined, undefined, "'include \"quelib1.inc\";'", 
		"'QELIB.INC'", "'qreg'", "'creg'", "'clean'", "'U'", "'CX'", "'sin'", 
		"'cos'", "'tan'", "'exp'", "'ln'", "'sqrt'", "'measure'", "'barrier'", 
		"'reset'", "'opaque'", "'if'", "'=='", "'->'", "';'", "','", "'{'", "'}'", 
		"'['", "']'", "'('", "')'", "'^'", "'*'", "'/'", "'+'", "'-'", "'pi'", 
		"'gate'"
	];
	private static readonly _SYMBOLIC_NAMES: (string | undefined)[] = [
		undefined, "Comment", "WhiteSpace", "Real", "Int", "QasmDescriptor", "Include", 
		"Qelib", "Qreg", "Creg", "Clean", "U", "Cx", "Sin", "Cos", "Tan", "Exp", 
		"Ln", "Sqrt", "Measure", "Barrier", "Reset", "Opaque", "If", "Equals", 
		"Assign", "Semi", "Comma", "LeftCurlyBrace", "RightCurlyBrace", "LeftBrace", 
		"RightBrace", "LeftParen", "RightParen", "Pow", "Mult", "Div", "Sum", 
		"Subs", "Pi", "Gate", "Id"
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(QasmLexer._LITERAL_NAMES, QasmLexer._SYMBOLIC_NAMES, []);

	@Override
	@NotNull
	public get vocabulary(): Vocabulary {
		return QasmLexer.VOCABULARY;
	}


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(QasmLexer._ATN, this);
	}

	@Override
	public get grammarFileName(): string { return "QasmLexer.g4"; }

	@Override
	public get ruleNames(): string[] { return QasmLexer.ruleNames; }

	@Override
	public get serializedATN(): string { return QasmLexer._serializedATN; }

	@Override
	public get modeNames(): string[] { return QasmLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02+\u012C\b\x01"+
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06"+
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r"+
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t"+
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t"+
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t"+
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t"+
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x03"+
		"\x02\x03\x02\x03\x02\x03\x02\x07\x02Z\n\x02\f\x02\x0E\x02]\v\x02\x03\x02"+
		"\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x06\x04f\n\x04\r\x04"+
		"\x0E\x04g\x03\x04\x03\x04\x06\x04l\n\x04\r\x04\x0E\x04m\x03\x05\x06\x05"+
		"q\n\x05\r\x05\x0E\x05r\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06"+
		"\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06"+
		"\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06"+
		"\x03\x06\x05\x06\x8E\n\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03"+
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03"+
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03"+
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03"+
		"\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03"+
		"\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E"+
		"\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11"+
		"\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13"+
		"\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14"+
		"\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15"+
		"\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17"+
		"\x03\x17\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19"+
		"\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D"+
		"\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x03"+
		"\"\x03#\x03#\x03$\x03$\x03%\x03%\x03&\x03&\x03\'\x03\'\x03(\x03(\x03("+
		"\x03)\x03)\x03)\x03)\x03)\x03*\x03*\x07*\u0128\n*\f*\x0E*\u012B\v*\x02"+
		"\x02\x02+\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02"+
		"\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02"+
		"\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02"+
		"\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02"+
		"\x1E;\x02\x1F=\x02 ?\x02!A\x02\"C\x02#E\x02$G\x02%I\x02&K\x02\'M\x02("+
		"O\x02)Q\x02*S\x02+\x03\x02\x07\x04\x02\f\f\x0F\x0F\x05\x02\v\f\x0F\x0F"+
		"\"\"\x03\x022;\x03\x02c|\x05\x022;C\\c|\u0131\x02\x03\x03\x02\x02\x02"+
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02"+
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02"+
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02"+
		"\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02"+
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02"+
		"#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03"+
		"\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02"+
		"\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x02"+
		"7\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02"+
		"\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02"+
		"\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03"+
		"\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02"+
		"\x02\x02S\x03\x02\x02\x02\x03U\x03\x02\x02\x02\x05`\x03\x02\x02\x02\x07"+
		"e\x03\x02\x02\x02\tp\x03\x02\x02\x02\v\x8D\x03\x02\x02\x02\r\x8F\x03\x02"+
		"\x02\x02\x0F\xA6\x03\x02\x02\x02\x11\xB0\x03\x02\x02\x02\x13\xB5\x03\x02"+
		"\x02\x02\x15\xBA\x03\x02\x02\x02\x17\xC0\x03\x02\x02\x02\x19\xC2\x03\x02"+
		"\x02\x02\x1B\xC5\x03\x02\x02\x02\x1D\xC9\x03\x02\x02\x02\x1F\xCD\x03\x02"+
		"\x02\x02!\xD1\x03\x02\x02\x02#\xD5\x03\x02\x02\x02%\xD8\x03\x02\x02\x02"+
		"\'\xDD\x03\x02\x02\x02)\xE5\x03\x02\x02\x02+\xED\x03\x02\x02\x02-\xF3"+
		"\x03\x02\x02\x02/\xFA\x03\x02\x02\x021\xFD\x03\x02\x02\x023\u0100\x03"+
		"\x02\x02\x025\u0103\x03\x02\x02\x027\u0105\x03\x02\x02\x029\u0107\x03"+
		"\x02\x02\x02;\u0109\x03\x02\x02\x02=\u010B\x03\x02\x02\x02?\u010D\x03"+
		"\x02\x02\x02A\u010F\x03\x02\x02\x02C\u0111\x03\x02\x02\x02E\u0113\x03"+
		"\x02\x02\x02G\u0115\x03\x02\x02\x02I\u0117\x03\x02\x02\x02K\u0119\x03"+
		"\x02\x02\x02M\u011B\x03\x02\x02\x02O\u011D\x03\x02\x02\x02Q\u0120\x03"+
		"\x02\x02\x02S\u0125\x03\x02\x02\x02UV\x071\x02\x02VW\x071\x02\x02W[\x03"+
		"\x02\x02\x02XZ\n\x02\x02\x02YX\x03\x02\x02\x02Z]\x03\x02\x02\x02[Y\x03"+
		"\x02\x02\x02[\\\x03\x02\x02\x02\\^\x03\x02\x02\x02][\x03\x02\x02\x02^"+
		"_\b\x02\x02\x02_\x04\x03\x02\x02\x02`a\t\x03\x02\x02ab\x03\x02\x02\x02"+
		"bc\b\x03\x02\x02c\x06\x03\x02\x02\x02df\t\x04\x02\x02ed\x03\x02\x02\x02"+
		"fg\x03\x02\x02\x02ge\x03\x02\x02\x02gh\x03\x02\x02\x02hi\x03\x02\x02\x02"+
		"ik\x070\x02\x02jl\t\x04\x02\x02kj\x03\x02\x02\x02lm\x03\x02\x02\x02mk"+
		"\x03\x02\x02\x02mn\x03\x02\x02\x02n\b\x03\x02\x02\x02oq\t\x04\x02\x02"+
		"po\x03\x02\x02\x02qr\x03\x02\x02\x02rp\x03\x02\x02\x02rs\x03\x02\x02\x02"+
		"s\n\x03\x02\x02\x02tu\x07Q\x02\x02uv\x07R\x02\x02vw\x07G\x02\x02wx\x07"+
		"P\x02\x02xy\x07S\x02\x02yz\x07C\x02\x02z{\x07U\x02\x02{|\x07O\x02\x02"+
		"|}\x07\"\x02\x02}~\x074\x02\x02~\x7F\x070\x02\x02\x7F\x80\x072\x02\x02"+
		"\x80\x8E\x07=\x02\x02\x81\x82\x07K\x02\x02\x82\x83\x07D\x02\x02\x83\x84"+
		"\x07O\x02\x02\x84\x85\x07S\x02\x02\x85\x86\x07C\x02\x02\x86\x87\x07U\x02"+
		"\x02\x87\x88\x07O\x02\x02\x88\x89\x07\"\x02\x02\x89\x8A\x074\x02\x02\x8A"+
		"\x8B\x070\x02\x02\x8B\x8C\x072\x02\x02\x8C\x8E\x07=\x02\x02\x8Dt\x03\x02"+
		"\x02\x02\x8D\x81\x03\x02\x02\x02\x8E\f\x03\x02\x02\x02\x8F\x90\x07k\x02"+
		"\x02\x90\x91\x07p\x02\x02\x91\x92\x07e\x02\x02\x92\x93\x07n\x02\x02\x93"+
		"\x94\x07w\x02\x02\x94\x95\x07f\x02\x02\x95\x96\x07g\x02\x02\x96\x97\x07"+
		"\"\x02\x02\x97\x98\x07$\x02\x02\x98\x99\x07s\x02\x02\x99\x9A\x07w\x02"+
		"\x02\x9A\x9B\x07g\x02\x02\x9B\x9C\x07n\x02\x02\x9C\x9D\x07k\x02\x02\x9D"+
		"\x9E\x07d\x02\x02\x9E\x9F\x073\x02\x02\x9F\xA0\x070\x02\x02\xA0\xA1\x07"+
		"k\x02\x02\xA1\xA2\x07p\x02\x02\xA2\xA3\x07e\x02\x02\xA3\xA4\x07$\x02\x02"+
		"\xA4\xA5\x07=\x02\x02\xA5\x0E\x03\x02\x02\x02\xA6\xA7\x07S\x02\x02\xA7"+
		"\xA8\x07G\x02\x02\xA8\xA9\x07N\x02\x02\xA9\xAA\x07K\x02\x02\xAA\xAB\x07"+
		"D\x02\x02\xAB\xAC\x070\x02\x02\xAC\xAD\x07K\x02\x02\xAD\xAE\x07P\x02\x02"+
		"\xAE\xAF\x07E\x02\x02\xAF\x10\x03\x02\x02\x02\xB0\xB1\x07s\x02\x02\xB1"+
		"\xB2\x07t\x02\x02\xB2\xB3\x07g\x02\x02\xB3\xB4\x07i\x02\x02\xB4\x12\x03"+
		"\x02\x02\x02\xB5\xB6\x07e\x02\x02\xB6\xB7\x07t\x02\x02\xB7\xB8\x07g\x02"+
		"\x02\xB8\xB9\x07i\x02\x02\xB9\x14\x03\x02\x02\x02\xBA\xBB\x07e\x02\x02"+
		"\xBB\xBC\x07n\x02\x02\xBC\xBD\x07g\x02\x02\xBD\xBE\x07c\x02\x02\xBE\xBF"+
		"\x07p\x02\x02\xBF\x16\x03\x02\x02\x02\xC0\xC1\x07W\x02\x02\xC1\x18\x03"+
		"\x02\x02\x02\xC2\xC3\x07E\x02\x02\xC3\xC4\x07Z\x02\x02\xC4\x1A\x03\x02"+
		"\x02\x02\xC5\xC6\x07u\x02\x02\xC6\xC7\x07k\x02\x02\xC7\xC8\x07p\x02\x02"+
		"\xC8\x1C\x03\x02\x02\x02\xC9\xCA\x07e\x02\x02\xCA\xCB\x07q\x02\x02\xCB"+
		"\xCC\x07u\x02\x02\xCC\x1E\x03\x02\x02\x02\xCD\xCE\x07v\x02\x02\xCE\xCF"+
		"\x07c\x02\x02\xCF\xD0\x07p\x02\x02\xD0 \x03\x02\x02\x02\xD1\xD2\x07g\x02"+
		"\x02\xD2\xD3\x07z\x02\x02\xD3\xD4\x07r\x02\x02\xD4\"\x03\x02\x02\x02\xD5"+
		"\xD6\x07n\x02\x02\xD6\xD7\x07p\x02\x02\xD7$\x03\x02\x02\x02\xD8\xD9\x07"+
		"u\x02\x02\xD9\xDA\x07s\x02\x02\xDA\xDB\x07t\x02\x02\xDB\xDC\x07v\x02\x02"+
		"\xDC&\x03\x02\x02\x02\xDD\xDE\x07o\x02\x02\xDE\xDF\x07g\x02\x02\xDF\xE0"+
		"\x07c\x02\x02\xE0\xE1\x07u\x02\x02\xE1\xE2\x07w\x02\x02\xE2\xE3\x07t\x02"+
		"\x02\xE3\xE4\x07g\x02\x02\xE4(\x03\x02\x02\x02\xE5\xE6\x07d\x02\x02\xE6"+
		"\xE7\x07c\x02\x02\xE7\xE8\x07t\x02\x02\xE8\xE9\x07t\x02\x02\xE9\xEA\x07"+
		"k\x02\x02\xEA\xEB\x07g\x02\x02\xEB\xEC\x07t\x02\x02\xEC*\x03\x02\x02\x02"+
		"\xED\xEE\x07t\x02\x02\xEE\xEF\x07g\x02\x02\xEF\xF0\x07u\x02\x02\xF0\xF1"+
		"\x07g\x02\x02\xF1\xF2\x07v\x02\x02\xF2,\x03\x02\x02\x02\xF3\xF4\x07q\x02"+
		"\x02\xF4\xF5\x07r\x02\x02\xF5\xF6\x07c\x02\x02\xF6\xF7\x07s\x02\x02\xF7"+
		"\xF8\x07w\x02\x02\xF8\xF9\x07g\x02\x02\xF9.\x03\x02\x02\x02\xFA\xFB\x07"+
		"k\x02\x02\xFB\xFC\x07h\x02\x02\xFC0\x03\x02\x02\x02\xFD\xFE\x07?\x02\x02"+
		"\xFE\xFF\x07?\x02\x02\xFF2\x03\x02\x02\x02\u0100\u0101\x07/\x02\x02\u0101"+
		"\u0102\x07@\x02\x02\u01024\x03\x02\x02\x02\u0103\u0104\x07=\x02\x02\u0104"+
		"6\x03\x02\x02\x02\u0105\u0106\x07.\x02\x02\u01068\x03\x02\x02\x02\u0107"+
		"\u0108\x07}\x02\x02\u0108:\x03\x02\x02\x02\u0109\u010A\x07\x7F\x02\x02"+
		"\u010A<\x03\x02\x02\x02\u010B\u010C\x07]\x02\x02\u010C>\x03\x02\x02\x02"+
		"\u010D\u010E\x07_\x02\x02\u010E@\x03\x02\x02\x02\u010F\u0110\x07*\x02"+
		"\x02\u0110B\x03\x02\x02\x02\u0111\u0112\x07+\x02\x02\u0112D\x03\x02\x02"+
		"\x02\u0113\u0114\x07`\x02\x02\u0114F\x03\x02\x02\x02\u0115\u0116\x07,"+
		"\x02\x02\u0116H\x03\x02\x02\x02\u0117\u0118\x071\x02\x02\u0118J\x03\x02"+
		"\x02\x02\u0119\u011A\x07-\x02\x02\u011AL\x03\x02\x02\x02\u011B\u011C\x07"+
		"/\x02\x02\u011CN\x03\x02\x02\x02\u011D\u011E\x07r\x02\x02\u011E\u011F"+
		"\x07k\x02\x02\u011FP\x03\x02\x02\x02\u0120\u0121\x07i\x02\x02\u0121\u0122"+
		"\x07c\x02\x02\u0122\u0123\x07v\x02\x02\u0123\u0124\x07g\x02\x02\u0124"+
		"R\x03\x02\x02\x02\u0125\u0129\t\x05\x02\x02\u0126\u0128\t\x06\x02\x02"+
		"\u0127\u0126\x03\x02\x02\x02\u0128\u012B\x03\x02\x02\x02\u0129\u0127\x03"+
		"\x02\x02\x02\u0129\u012A\x03\x02\x02\x02\u012AT\x03\x02\x02\x02\u012B"+
		"\u0129\x03\x02\x02\x02\t\x02[gmr\x8D\u0129\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!QasmLexer.__ATN) {
			QasmLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(QasmLexer._serializedATN));
		}

		return QasmLexer.__ATN;
	}

}

