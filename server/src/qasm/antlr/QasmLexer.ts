// Generated from QasmLexer.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class QasmLexer extends Lexer {
	public static readonly Comment = 1;
	public static readonly WhiteSpace = 2;
	public static readonly Real = 3;
	public static readonly Int = 4;
	public static readonly QasmDescriptor = 5;
	public static readonly Include = 6;
	public static readonly Qelib = 7;
	public static readonly Qreg = 8;
	public static readonly Creg = 9;
	public static readonly Clean = 10;
	public static readonly U = 11;
	public static readonly Cx = 12;
	public static readonly Sin = 13;
	public static readonly Cos = 14;
	public static readonly Tan = 15;
	public static readonly Exp = 16;
	public static readonly Ln = 17;
	public static readonly Sqrt = 18;
	public static readonly Measure = 19;
	public static readonly Barrier = 20;
	public static readonly Reset = 21;
	public static readonly Opaque = 22;
	public static readonly If = 23;
	public static readonly Equals = 24;
	public static readonly Assign = 25;
	public static readonly Semi = 26;
	public static readonly Comma = 27;
	public static readonly LeftCurlyBrace = 28;
	public static readonly RightCurlyBrace = 29;
	public static readonly LeftBrace = 30;
	public static readonly RightBrace = 31;
	public static readonly LeftParen = 32;
	public static readonly RightParen = 33;
	public static readonly Pow = 34;
	public static readonly Mult = 35;
	public static readonly Div = 36;
	public static readonly Sum = 37;
	public static readonly Subs = 38;
	public static readonly Pi = 39;
	public static readonly Gate = 40;
	public static readonly Library = 41;
	public static readonly Id = 42;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"Comment", "WhiteSpace", "Real", "Int", "QasmDescriptor", "Include", "Qelib", 
		"Qreg", "Creg", "Clean", "U", "Cx", "Sin", "Cos", "Tan", "Exp", "Ln", 
		"Sqrt", "Measure", "Barrier", "Reset", "Opaque", "If", "Equals", "Assign", 
		"Semi", "Comma", "LeftCurlyBrace", "RightCurlyBrace", "LeftBrace", "RightBrace", 
		"LeftParen", "RightParen", "Pow", "Mult", "Div", "Sum", "Subs", "Pi", 
		"Gate", "Library", "Id",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, "'include'", 
		"'QELIB.INC'", "'qreg'", "'creg'", "'clean'", "'U'", "'CX'", "'sin'", 
		"'cos'", "'tan'", "'exp'", "'ln'", "'sqrt'", "'measure'", "'barrier'", 
		"'reset'", "'opaque'", "'if'", "'=='", "'->'", "';'", "','", "'{'", "'}'", 
		"'['", "']'", "'('", "')'", "'^'", "'*'", "'/'", "'+'", "'-'", "'pi'", 
		"'gate'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "Comment", "WhiteSpace", "Real", "Int", "QasmDescriptor", "Include", 
		"Qelib", "Qreg", "Creg", "Clean", "U", "Cx", "Sin", "Cos", "Tan", "Exp", 
		"Ln", "Sqrt", "Measure", "Barrier", "Reset", "Opaque", "If", "Equals", 
		"Assign", "Semi", "Comma", "LeftCurlyBrace", "RightCurlyBrace", "LeftBrace", 
		"RightBrace", "LeftParen", "RightParen", "Pow", "Mult", "Div", "Sum", 
		"Subs", "Pi", "Gate", "Library", "Id",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(QasmLexer._LITERAL_NAMES, QasmLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return QasmLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(QasmLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "QasmLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return QasmLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return QasmLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return QasmLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return QasmLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02,\u012B\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x03\x02\x03\x02\x03\x02\x03\x02\x07\x02\\\n\x02\f\x02\x0E\x02_\v" +
		"\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x06\x04h" +
		"\n\x04\r\x04\x0E\x04i\x03\x04\x03\x04\x06\x04n\n\x04\r\x04\x0E\x04o\x03" +
		"\x05\x06\x05s\n\x05\r\x05\x0E\x05t\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x05\x06\x90\n\x06\x03\x07\x03\x07\x03\x07\x03\x07" +
		"\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03" +
		"\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03" +
		"\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03" +
		"\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03" +
		"\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
		"\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03" +
		"\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03" +
		"\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03" +
		"\x1F\x03 \x03 \x03!\x03!\x03\"\x03\"\x03#\x03#\x03$\x03$\x03%\x03%\x03" +
		"&\x03&\x03\'\x03\'\x03(\x03(\x03(\x03)\x03)\x03)\x03)\x03)\x03*\x03*\x07" +
		"*\u011B\n*\f*\x0E*\u011E\v*\x03*\x03*\x03*\x03*\x03*\x03+\x03+\x07+\u0127" +
		"\n+\f+\x0E+\u012A\v+\x02\x02\x02,\x03\x02\x03\x05\x02\x04\x07\x02\x05" +
		"\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17" +
		"\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13" +
		"%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02" +
		"\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02\"C\x02#E\x02" +
		"$G\x02%I\x02&K\x02\'M\x02(O\x02)Q\x02*S\x02+U\x02,\x03\x02\x07\x04\x02" +
		"\f\f\x0F\x0F\x05\x02\v\f\x0F\x0F\"\"\x03\x022;\x03\x02c|\x05\x022;C\\" +
		"c|\x02\u0131\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03" +
		"\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02" +
		"\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02" +
		"\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02" +
		"\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02" +
		"\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02" +
		"\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-" +
		"\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02" +
		"\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02" +
		"\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03" +
		"\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02" +
		"\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02" +
		"O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02" +
		"\x02\x02\x03W\x03\x02\x02\x02\x05b\x03\x02\x02\x02\x07g\x03\x02\x02\x02" +
		"\tr\x03\x02\x02\x02\v\x8F\x03\x02\x02\x02\r\x91\x03\x02\x02\x02\x0F\x99" +
		"\x03\x02\x02\x02\x11\xA3\x03\x02\x02\x02\x13\xA8\x03\x02\x02\x02\x15\xAD" +
		"\x03\x02\x02\x02\x17\xB3\x03\x02\x02\x02\x19\xB5\x03\x02\x02\x02\x1B\xB8" +
		"\x03\x02\x02\x02\x1D\xBC\x03\x02\x02\x02\x1F\xC0\x03\x02\x02\x02!\xC4" +
		"\x03\x02\x02\x02#\xC8\x03\x02\x02\x02%\xCB\x03\x02\x02\x02\'\xD0\x03\x02" +
		"\x02\x02)\xD8\x03\x02\x02\x02+\xE0\x03\x02\x02\x02-\xE6\x03\x02\x02\x02" +
		"/\xED\x03\x02\x02\x021\xF0\x03\x02\x02\x023\xF3\x03\x02\x02\x025\xF6\x03" +
		"\x02\x02\x027\xF8\x03\x02\x02\x029\xFA\x03\x02\x02\x02;\xFC\x03\x02\x02" +
		"\x02=\xFE\x03\x02\x02\x02?\u0100\x03\x02\x02\x02A\u0102\x03\x02\x02\x02" +
		"C\u0104\x03\x02\x02\x02E\u0106\x03\x02\x02\x02G\u0108\x03\x02\x02\x02" +
		"I\u010A\x03\x02\x02\x02K\u010C\x03\x02\x02\x02M\u010E\x03\x02\x02\x02" +
		"O\u0110\x03\x02\x02\x02Q\u0113\x03\x02\x02\x02S\u0118\x03\x02\x02\x02" +
		"U\u0124\x03\x02\x02\x02WX\x071\x02\x02XY\x071\x02\x02Y]\x03\x02\x02\x02" +
		"Z\\\n\x02\x02\x02[Z\x03\x02\x02\x02\\_\x03\x02\x02\x02][\x03\x02\x02\x02" +
		"]^\x03\x02\x02\x02^`\x03\x02\x02\x02_]\x03\x02\x02\x02`a\b\x02\x02\x02" +
		"a\x04\x03\x02\x02\x02bc\t\x03\x02\x02cd\x03\x02\x02\x02de\b\x03\x02\x02" +
		"e\x06\x03\x02\x02\x02fh\t\x04\x02\x02gf\x03\x02\x02\x02hi\x03\x02\x02" +
		"\x02ig\x03\x02\x02\x02ij\x03\x02\x02\x02jk\x03\x02\x02\x02km\x070\x02" +
		"\x02ln\t\x04\x02\x02ml\x03\x02\x02\x02no\x03\x02\x02\x02om\x03\x02\x02" +
		"\x02op\x03\x02\x02\x02p\b\x03\x02\x02\x02qs\t\x04\x02\x02rq\x03\x02\x02" +
		"\x02st\x03\x02\x02\x02tr\x03\x02\x02\x02tu\x03\x02\x02\x02u\n\x03\x02" +
		"\x02\x02vw\x07Q\x02\x02wx\x07R\x02\x02xy\x07G\x02\x02yz\x07P\x02\x02z" +
		"{\x07S\x02\x02{|\x07C\x02\x02|}\x07U\x02\x02}~\x07O\x02\x02~\x7F\x07\"" +
		"\x02\x02\x7F\x80\x074\x02\x02\x80\x81\x070\x02\x02\x81\x82\x072\x02\x02" +
		"\x82\x90\x07=\x02\x02\x83\x84\x07K\x02\x02\x84\x85\x07D\x02\x02\x85\x86" +
		"\x07O\x02\x02\x86\x87\x07S\x02\x02\x87\x88\x07C\x02\x02\x88\x89\x07U\x02" +
		"\x02\x89\x8A\x07O\x02\x02\x8A\x8B\x07\"\x02\x02\x8B\x8C\x074\x02\x02\x8C" +
		"\x8D\x070\x02\x02\x8D\x8E\x072\x02\x02\x8E\x90\x07=\x02\x02\x8Fv\x03\x02" +
		"\x02\x02\x8F\x83\x03\x02\x02\x02\x90\f\x03\x02\x02\x02\x91\x92\x07k\x02" +
		"\x02\x92\x93\x07p\x02\x02\x93\x94\x07e\x02\x02\x94\x95\x07n\x02\x02\x95" +
		"\x96\x07w\x02\x02\x96\x97\x07f\x02\x02\x97\x98\x07g\x02\x02\x98\x0E\x03" +
		"\x02\x02\x02\x99\x9A\x07S\x02\x02\x9A\x9B\x07G\x02\x02\x9B\x9C\x07N\x02" +
		"\x02\x9C\x9D\x07K\x02\x02\x9D\x9E\x07D\x02\x02\x9E\x9F\x070\x02\x02\x9F" +
		"\xA0\x07K\x02\x02\xA0\xA1\x07P\x02\x02\xA1\xA2\x07E\x02\x02\xA2\x10\x03" +
		"\x02\x02\x02\xA3\xA4\x07s\x02\x02\xA4\xA5\x07t\x02\x02\xA5\xA6\x07g\x02" +
		"\x02\xA6\xA7\x07i\x02\x02\xA7\x12\x03\x02\x02\x02\xA8\xA9\x07e\x02\x02" +
		"\xA9\xAA\x07t\x02\x02\xAA\xAB\x07g\x02\x02\xAB\xAC\x07i\x02\x02\xAC\x14" +
		"\x03\x02\x02\x02\xAD\xAE\x07e\x02\x02\xAE\xAF\x07n\x02\x02\xAF\xB0\x07" +
		"g\x02\x02\xB0\xB1\x07c\x02\x02\xB1\xB2\x07p\x02\x02\xB2\x16\x03\x02\x02" +
		"\x02\xB3\xB4\x07W\x02\x02\xB4\x18\x03\x02\x02\x02\xB5\xB6\x07E\x02\x02" +
		"\xB6\xB7\x07Z\x02\x02\xB7\x1A\x03\x02\x02\x02\xB8\xB9\x07u\x02\x02\xB9" +
		"\xBA\x07k\x02\x02\xBA\xBB\x07p\x02\x02\xBB\x1C\x03\x02\x02\x02\xBC\xBD" +
		"\x07e\x02\x02\xBD\xBE\x07q\x02\x02\xBE\xBF\x07u\x02\x02\xBF\x1E\x03\x02" +
		"\x02\x02\xC0\xC1\x07v\x02\x02\xC1\xC2\x07c\x02\x02\xC2\xC3\x07p\x02\x02" +
		"\xC3 \x03\x02\x02\x02\xC4\xC5\x07g\x02\x02\xC5\xC6\x07z\x02\x02\xC6\xC7" +
		"\x07r\x02\x02\xC7\"\x03\x02\x02\x02\xC8\xC9\x07n\x02\x02\xC9\xCA\x07p" +
		"\x02\x02\xCA$\x03\x02\x02\x02\xCB\xCC\x07u\x02\x02\xCC\xCD\x07s\x02\x02" +
		"\xCD\xCE\x07t\x02\x02\xCE\xCF\x07v\x02\x02\xCF&\x03\x02\x02\x02\xD0\xD1" +
		"\x07o\x02\x02\xD1\xD2\x07g\x02\x02\xD2\xD3\x07c\x02\x02\xD3\xD4\x07u\x02" +
		"\x02\xD4\xD5\x07w\x02\x02\xD5\xD6\x07t\x02\x02\xD6\xD7\x07g\x02\x02\xD7" +
		"(\x03\x02\x02\x02\xD8\xD9\x07d\x02\x02\xD9\xDA\x07c\x02\x02\xDA\xDB\x07" +
		"t\x02\x02\xDB\xDC\x07t\x02\x02\xDC\xDD\x07k\x02\x02\xDD\xDE\x07g\x02\x02" +
		"\xDE\xDF\x07t\x02\x02\xDF*\x03\x02\x02\x02\xE0\xE1\x07t\x02\x02\xE1\xE2" +
		"\x07g\x02\x02\xE2\xE3\x07u\x02\x02\xE3\xE4\x07g\x02\x02\xE4\xE5\x07v\x02" +
		"\x02\xE5,\x03\x02\x02\x02\xE6\xE7\x07q\x02\x02\xE7\xE8\x07r\x02\x02\xE8" +
		"\xE9\x07c\x02\x02\xE9\xEA\x07s\x02\x02\xEA\xEB\x07w\x02\x02\xEB\xEC\x07" +
		"g\x02\x02\xEC.\x03\x02\x02\x02\xED\xEE\x07k\x02\x02\xEE\xEF\x07h\x02\x02" +
		"\xEF0\x03\x02\x02\x02\xF0\xF1\x07?\x02\x02\xF1\xF2\x07?\x02\x02\xF22\x03" +
		"\x02\x02\x02\xF3\xF4\x07/\x02\x02\xF4\xF5\x07@\x02\x02\xF54\x03\x02\x02" +
		"\x02\xF6\xF7\x07=\x02\x02\xF76\x03\x02\x02\x02\xF8\xF9\x07.\x02\x02\xF9" +
		"8\x03\x02\x02\x02\xFA\xFB\x07}\x02\x02\xFB:\x03\x02\x02\x02\xFC\xFD\x07" +
		"\x7F\x02\x02\xFD<\x03\x02\x02\x02\xFE\xFF\x07]\x02\x02\xFF>\x03\x02\x02" +
		"\x02\u0100\u0101\x07_\x02\x02\u0101@\x03\x02\x02\x02\u0102\u0103\x07*" +
		"\x02\x02\u0103B\x03\x02\x02\x02\u0104\u0105\x07+\x02\x02\u0105D\x03\x02" +
		"\x02\x02\u0106\u0107\x07`\x02\x02\u0107F\x03\x02\x02\x02\u0108\u0109\x07" +
		",\x02\x02\u0109H\x03\x02\x02\x02\u010A\u010B\x071\x02\x02\u010BJ\x03\x02" +
		"\x02\x02\u010C\u010D\x07-\x02\x02\u010DL\x03\x02\x02\x02\u010E\u010F\x07" +
		"/\x02\x02\u010FN\x03\x02\x02\x02\u0110\u0111\x07r\x02\x02\u0111\u0112" +
		"\x07k\x02\x02\u0112P\x03\x02\x02\x02\u0113\u0114\x07i\x02\x02\u0114\u0115" +
		"\x07c\x02\x02\u0115\u0116\x07v\x02\x02\u0116\u0117\x07g\x02\x02\u0117" +
		"R\x03\x02\x02\x02\u0118\u011C\t\x05\x02\x02\u0119\u011B\t\x06\x02\x02" +
		"\u011A\u0119\x03\x02\x02\x02\u011B\u011E\x03\x02\x02\x02\u011C\u011A\x03" +
		"\x02\x02\x02\u011C\u011D\x03\x02\x02\x02\u011D\u011F\x03\x02\x02\x02\u011E" +
		"\u011C\x03\x02\x02\x02\u011F\u0120\x070\x02\x02\u0120\u0121\x07k\x02\x02" +
		"\u0121\u0122\x07p\x02\x02\u0122\u0123\x07e\x02\x02\u0123T\x03\x02\x02" +
		"\x02\u0124\u0128\t\x05\x02\x02\u0125\u0127\t\x06\x02\x02\u0126\u0125\x03" +
		"\x02\x02\x02\u0127\u012A\x03\x02\x02\x02\u0128\u0126\x03\x02\x02\x02\u0128" +
		"\u0129\x03\x02\x02\x02\u0129V\x03\x02\x02\x02\u012A\u0128\x03\x02\x02" +
		"\x02\n\x02]iot\x8F\u011C\u0128\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!QasmLexer.__ATN) {
			QasmLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(QasmLexer._serializedATN));
		}

		return QasmLexer.__ATN;
	}

}

