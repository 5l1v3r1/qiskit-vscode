// Generated from src/antlr/Qasm.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from 'antlr4ts/atn/ATN';
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator';
import { NotNull } from 'antlr4ts/Decorators';
import { Override } from 'antlr4ts/Decorators';
import { RuleContext } from 'antlr4ts/RuleContext';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';

import * as Utils from 'antlr4ts/misc/Utils';


export class QasmLexer extends Lexer {
	public static readonly T__0=1;
	public static readonly Comment=2;
	public static readonly WhiteSpace=3;
	public static readonly Real=4;
	public static readonly Int=5;
	public static readonly QasmDescriptor=6;
	public static readonly Include=7;
	public static readonly Qelib=8;
	public static readonly Qreg=9;
	public static readonly Creg=10;
	public static readonly Clean=11;
	public static readonly U=12;
	public static readonly Cx=13;
	public static readonly Sin=14;
	public static readonly Cos=15;
	public static readonly Tan=16;
	public static readonly Exp=17;
	public static readonly Ln=18;
	public static readonly Sqrt=19;
	public static readonly Measure=20;
	public static readonly Barrier=21;
	public static readonly Reset=22;
	public static readonly Opaque=23;
	public static readonly Assign=24;
	public static readonly Semi=25;
	public static readonly Comma=26;
	public static readonly LeftCurlyBrace=27;
	public static readonly RightCurlyBrace=28;
	public static readonly LeftBrace=29;
	public static readonly RightBrace=30;
	public static readonly LeftParen=31;
	public static readonly RightParen=32;
	public static readonly Pow=33;
	public static readonly Mult=34;
	public static readonly Div=35;
	public static readonly Sum=36;
	public static readonly Subs=37;
	public static readonly Pi=38;
	public static readonly Gate=39;
	public static readonly Id=40;
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE"
	];

	public static readonly ruleNames: string[] = [
		"T__0", "Comment", "WhiteSpace", "Real", "Int", "QasmDescriptor", "Include", 
		"Qelib", "Qreg", "Creg", "Clean", "U", "Cx", "Sin", "Cos", "Tan", "Exp", 
		"Ln", "Sqrt", "Measure", "Barrier", "Reset", "Opaque", "Assign", "Semi", 
		"Comma", "LeftCurlyBrace", "RightCurlyBrace", "LeftBrace", "RightBrace", 
		"LeftParen", "RightParen", "Pow", "Mult", "Div", "Sum", "Subs", "Pi", 
		"Gate", "Id"
	];

	private static readonly _LITERAL_NAMES: (string | undefined)[] = [
		undefined, "'conditional'", undefined, undefined, undefined, undefined, 
		undefined, "'include \"quelib1.inc\";'", "'QELIB.INC'", "'qreg'", "'creg'", 
		"'clean'", "'U'", "'CX'", "'sin'", "'cos'", "'tan'", "'exp'", "'ln'", 
		"'sqrt'", "'measure'", "'barrier'", "'reset'", "'opaque'", "'->'", "';'", 
		"','", "'{'", "'}'", "'['", "']'", "'('", "')'", "'^'", "'*'", "'/'", 
		"'+'", "'-'", "'pi'", "'gate'"
	];
	private static readonly _SYMBOLIC_NAMES: (string | undefined)[] = [
		undefined, undefined, "Comment", "WhiteSpace", "Real", "Int", "QasmDescriptor", 
		"Include", "Qelib", "Qreg", "Creg", "Clean", "U", "Cx", "Sin", "Cos", 
		"Tan", "Exp", "Ln", "Sqrt", "Measure", "Barrier", "Reset", "Opaque", "Assign", 
		"Semi", "Comma", "LeftCurlyBrace", "RightCurlyBrace", "LeftBrace", "RightBrace", 
		"LeftParen", "RightParen", "Pow", "Mult", "Div", "Sum", "Subs", "Pi", 
		"Gate", "Id"
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(QasmLexer._LITERAL_NAMES, QasmLexer._SYMBOLIC_NAMES, []);

	@Override
	@NotNull
	public get vocabulary(): Vocabulary {
		return QasmLexer.VOCABULARY;
	}


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(QasmLexer._ATN, this);
	}

	@Override
	public get grammarFileName(): string { return "Qasm.g4"; }

	@Override
	public get ruleNames(): string[] { return QasmLexer.ruleNames; }

	@Override
	public get serializedATN(): string { return QasmLexer._serializedATN; }

	@Override
	public get modeNames(): string[] { return QasmLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02*\u0130\b\x01"+
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06"+
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r"+
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t"+
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t"+
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t"+
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t"+
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x03\x02\x03"+
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03"+
		"\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x07\x03d\n\x03\f\x03\x0E"+
		"\x03g\v\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x06"+
		"\x05p\n\x05\r\x05\x0E\x05q\x03\x05\x03\x05\x06\x05v\n\x05\r\x05\x0E\x05"+
		"w\x03\x06\x06\x06{\n\x06\r\x06\x0E\x06|\x03\x07\x03\x07\x03\x07\x03\x07"+
		"\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07"+
		"\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07"+
		"\x03\x07\x03\x07\x03\x07\x05\x07\x98\n\x07\x03\b\x03\b\x03\b\x03\b\x03"+
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03"+
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03"+
		"\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03"+
		"\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\x0E"+
		"\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10"+
		"\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12"+
		"\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15"+
		"\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16"+
		"\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17"+
		"\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18"+
		"\x03\x18\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C"+
		"\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03"+
		"!\x03!\x03\"\x03\"\x03#\x03#\x03$\x03$\x03%\x03%\x03&\x03&\x03\'\x03\'"+
		"\x03\'\x03(\x03(\x03(\x03(\x03(\x03)\x03)\x07)\u012C\n)\f)\x0E)\u012F"+
		"\v)\x02\x02\x02*\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07"+
		"\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E"+
		"\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02"+
		"\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02"+
		"\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02\"C\x02#E\x02$G\x02%I\x02&K\x02"+
		"\'M\x02(O\x02)Q\x02*\x03\x02\x07\x04\x02\f\f\x0F\x0F\x05\x02\v\f\x0F\x0F"+
		"\"\"\x03\x022;\x03\x02c|\x05\x022;C\\c|\u0135\x02\x03\x03\x02\x02\x02"+
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02"+
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02"+
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02"+
		"\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02"+
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02"+
		"#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03"+
		"\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02"+
		"\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x02"+
		"7\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02"+
		"\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02"+
		"\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03"+
		"\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02"+
		"\x02\x03S\x03\x02\x02\x02\x05_\x03\x02\x02\x02\x07j\x03\x02\x02\x02\t"+
		"o\x03\x02\x02\x02\vz\x03\x02\x02\x02\r\x97\x03\x02\x02\x02\x0F\x99\x03"+
		"\x02\x02\x02\x11\xB0\x03\x02\x02\x02\x13\xBA\x03\x02\x02\x02\x15\xBF\x03"+
		"\x02\x02\x02\x17\xC4\x03\x02\x02\x02\x19\xCA\x03\x02\x02\x02\x1B\xCC\x03"+
		"\x02\x02\x02\x1D\xCF\x03\x02\x02\x02\x1F\xD3\x03\x02\x02\x02!\xD7\x03"+
		"\x02\x02\x02#\xDB\x03\x02\x02\x02%\xDF\x03\x02\x02\x02\'\xE2\x03\x02\x02"+
		"\x02)\xE7\x03\x02\x02\x02+\xEF\x03\x02\x02\x02-\xF7\x03\x02\x02\x02/\xFD"+
		"\x03\x02\x02\x021\u0104\x03\x02\x02\x023\u0107\x03\x02\x02\x025\u0109"+
		"\x03\x02\x02\x027\u010B\x03\x02\x02\x029\u010D\x03\x02\x02\x02;\u010F"+
		"\x03\x02\x02\x02=\u0111\x03\x02\x02\x02?\u0113\x03\x02\x02\x02A\u0115"+
		"\x03\x02\x02\x02C\u0117\x03\x02\x02\x02E\u0119\x03\x02\x02\x02G\u011B"+
		"\x03\x02\x02\x02I\u011D\x03\x02\x02\x02K\u011F\x03\x02\x02\x02M\u0121"+
		"\x03\x02\x02\x02O\u0124\x03\x02\x02\x02Q\u0129\x03\x02\x02\x02ST\x07e"+
		"\x02\x02TU\x07q\x02\x02UV\x07p\x02\x02VW\x07f\x02\x02WX\x07k\x02\x02X"+
		"Y\x07v\x02\x02YZ\x07k\x02\x02Z[\x07q\x02\x02[\\\x07p\x02\x02\\]\x07c\x02"+
		"\x02]^\x07n\x02\x02^\x04\x03\x02\x02\x02_`\x071\x02\x02`a\x071\x02\x02"+
		"ae\x03\x02\x02\x02bd\n\x02\x02\x02cb\x03\x02\x02\x02dg\x03\x02\x02\x02"+
		"ec\x03\x02\x02\x02ef\x03\x02\x02\x02fh\x03\x02\x02\x02ge\x03\x02\x02\x02"+
		"hi\b\x03\x02\x02i\x06\x03\x02\x02\x02jk\t\x03\x02\x02kl\x03\x02\x02\x02"+
		"lm\b\x04\x02\x02m\b\x03\x02\x02\x02np\t\x04\x02\x02on\x03\x02\x02\x02"+
		"pq\x03\x02\x02\x02qo\x03\x02\x02\x02qr\x03\x02\x02\x02rs\x03\x02\x02\x02"+
		"su\x070\x02\x02tv\t\x04\x02\x02ut\x03\x02\x02\x02vw\x03\x02\x02\x02wu"+
		"\x03\x02\x02\x02wx\x03\x02\x02\x02x\n\x03\x02\x02\x02y{\t\x04\x02\x02"+
		"zy\x03\x02\x02\x02{|\x03\x02\x02\x02|z\x03\x02\x02\x02|}\x03\x02\x02\x02"+
		"}\f\x03\x02\x02\x02~\x7F\x07Q\x02\x02\x7F\x80\x07R\x02\x02\x80\x81\x07"+
		"G\x02\x02\x81\x82\x07P\x02\x02\x82\x83\x07S\x02\x02\x83\x84\x07C\x02\x02"+
		"\x84\x85\x07U\x02\x02\x85\x86\x07O\x02\x02\x86\x87\x07\"\x02\x02\x87\x88"+
		"\x074\x02\x02\x88\x89\x070\x02\x02\x89\x8A\x072\x02\x02\x8A\x98\x07=\x02"+
		"\x02\x8B\x8C\x07K\x02\x02\x8C\x8D\x07D\x02\x02\x8D\x8E\x07O\x02\x02\x8E"+
		"\x8F\x07S\x02\x02\x8F\x90\x07C\x02\x02\x90\x91\x07U\x02\x02\x91\x92\x07"+
		"O\x02\x02\x92\x93\x07\"\x02\x02\x93\x94\x074\x02\x02\x94\x95\x070\x02"+
		"\x02\x95\x96\x072\x02\x02\x96\x98\x07=\x02\x02\x97~\x03\x02\x02\x02\x97"+
		"\x8B\x03\x02\x02\x02\x98\x0E\x03\x02\x02\x02\x99\x9A\x07k\x02\x02\x9A"+
		"\x9B\x07p\x02\x02\x9B\x9C\x07e\x02\x02\x9C\x9D\x07n\x02\x02\x9D\x9E\x07"+
		"w\x02\x02\x9E\x9F\x07f\x02\x02\x9F\xA0\x07g\x02\x02\xA0\xA1\x07\"\x02"+
		"\x02\xA1\xA2\x07$\x02\x02\xA2\xA3\x07s\x02\x02\xA3\xA4\x07w\x02\x02\xA4"+
		"\xA5\x07g\x02\x02\xA5\xA6\x07n\x02\x02\xA6\xA7\x07k\x02\x02\xA7\xA8\x07"+
		"d\x02\x02\xA8\xA9\x073\x02\x02\xA9\xAA\x070\x02\x02\xAA\xAB\x07k\x02\x02"+
		"\xAB\xAC\x07p\x02\x02\xAC\xAD\x07e\x02\x02\xAD\xAE\x07$\x02\x02\xAE\xAF"+
		"\x07=\x02\x02\xAF\x10\x03\x02\x02\x02\xB0\xB1\x07S\x02\x02\xB1\xB2\x07"+
		"G\x02\x02\xB2\xB3\x07N\x02\x02\xB3\xB4\x07K\x02\x02\xB4\xB5\x07D\x02\x02"+
		"\xB5\xB6\x070\x02\x02\xB6\xB7\x07K\x02\x02\xB7\xB8\x07P\x02\x02\xB8\xB9"+
		"\x07E\x02\x02\xB9\x12\x03\x02\x02\x02\xBA\xBB\x07s\x02\x02\xBB\xBC\x07"+
		"t\x02\x02\xBC\xBD\x07g\x02\x02\xBD\xBE\x07i\x02\x02\xBE\x14\x03\x02\x02"+
		"\x02\xBF\xC0\x07e\x02\x02\xC0\xC1\x07t\x02\x02\xC1\xC2\x07g\x02\x02\xC2"+
		"\xC3\x07i\x02\x02\xC3\x16\x03\x02\x02\x02\xC4\xC5\x07e\x02\x02\xC5\xC6"+
		"\x07n\x02\x02\xC6\xC7\x07g\x02\x02\xC7\xC8\x07c\x02\x02\xC8\xC9\x07p\x02"+
		"\x02\xC9\x18\x03\x02\x02\x02\xCA\xCB\x07W\x02\x02\xCB\x1A\x03\x02\x02"+
		"\x02\xCC\xCD\x07E\x02\x02\xCD\xCE\x07Z\x02\x02\xCE\x1C\x03\x02\x02\x02"+
		"\xCF\xD0\x07u\x02\x02\xD0\xD1\x07k\x02\x02\xD1\xD2\x07p\x02\x02\xD2\x1E"+
		"\x03\x02\x02\x02\xD3\xD4\x07e\x02\x02\xD4\xD5\x07q\x02\x02\xD5\xD6\x07"+
		"u\x02\x02\xD6 \x03\x02\x02\x02\xD7\xD8\x07v\x02\x02\xD8\xD9\x07c\x02\x02"+
		"\xD9\xDA\x07p\x02\x02\xDA\"\x03\x02\x02\x02\xDB\xDC\x07g\x02\x02\xDC\xDD"+
		"\x07z\x02\x02\xDD\xDE\x07r\x02\x02\xDE$\x03\x02\x02\x02\xDF\xE0\x07n\x02"+
		"\x02\xE0\xE1\x07p\x02\x02\xE1&\x03\x02\x02\x02\xE2\xE3\x07u\x02\x02\xE3"+
		"\xE4\x07s\x02\x02\xE4\xE5\x07t\x02\x02\xE5\xE6\x07v\x02\x02\xE6(\x03\x02"+
		"\x02\x02\xE7\xE8\x07o\x02\x02\xE8\xE9\x07g\x02\x02\xE9\xEA\x07c\x02\x02"+
		"\xEA\xEB\x07u\x02\x02\xEB\xEC\x07w\x02\x02\xEC\xED\x07t\x02\x02\xED\xEE"+
		"\x07g\x02\x02\xEE*\x03\x02\x02\x02\xEF\xF0\x07d\x02\x02\xF0\xF1\x07c\x02"+
		"\x02\xF1\xF2\x07t\x02\x02\xF2\xF3\x07t\x02\x02\xF3\xF4\x07k\x02\x02\xF4"+
		"\xF5\x07g\x02\x02\xF5\xF6\x07t\x02\x02\xF6,\x03\x02\x02\x02\xF7\xF8\x07"+
		"t\x02\x02\xF8\xF9\x07g\x02\x02\xF9\xFA\x07u\x02\x02\xFA\xFB\x07g\x02\x02"+
		"\xFB\xFC\x07v\x02\x02\xFC.\x03\x02\x02\x02\xFD\xFE\x07q\x02\x02\xFE\xFF"+
		"\x07r\x02\x02\xFF\u0100\x07c\x02\x02\u0100\u0101\x07s\x02\x02\u0101\u0102"+
		"\x07w\x02\x02\u0102\u0103\x07g\x02\x02\u01030\x03\x02\x02\x02\u0104\u0105"+
		"\x07/\x02\x02\u0105\u0106\x07@\x02\x02\u01062\x03\x02\x02\x02\u0107\u0108"+
		"\x07=\x02\x02\u01084\x03\x02\x02\x02\u0109\u010A\x07.\x02\x02\u010A6\x03"+
		"\x02\x02\x02\u010B\u010C\x07}\x02\x02\u010C8\x03\x02\x02\x02\u010D\u010E"+
		"\x07\x7F\x02\x02\u010E:\x03\x02\x02\x02\u010F\u0110\x07]\x02\x02\u0110"+
		"<\x03\x02\x02\x02\u0111\u0112\x07_\x02\x02\u0112>\x03\x02\x02\x02\u0113"+
		"\u0114\x07*\x02\x02\u0114@\x03\x02\x02\x02\u0115\u0116\x07+\x02\x02\u0116"+
		"B\x03\x02\x02\x02\u0117\u0118\x07`\x02\x02\u0118D\x03\x02\x02\x02\u0119"+
		"\u011A\x07,\x02\x02\u011AF\x03\x02\x02\x02\u011B\u011C\x071\x02\x02\u011C"+
		"H\x03\x02\x02\x02\u011D\u011E\x07-\x02\x02\u011EJ\x03\x02\x02\x02\u011F"+
		"\u0120\x07/\x02\x02\u0120L\x03\x02\x02\x02\u0121\u0122\x07r\x02\x02\u0122"+
		"\u0123\x07k\x02\x02\u0123N\x03\x02\x02\x02\u0124\u0125\x07i\x02\x02\u0125"+
		"\u0126\x07c\x02\x02\u0126\u0127\x07v\x02\x02\u0127\u0128\x07g\x02\x02"+
		"\u0128P\x03\x02\x02\x02\u0129\u012D\t\x05\x02\x02\u012A\u012C\t\x06\x02"+
		"\x02\u012B\u012A\x03\x02\x02\x02\u012C\u012F\x03\x02\x02\x02\u012D\u012B"+
		"\x03\x02\x02\x02\u012D\u012E\x03\x02\x02\x02\u012ER\x03\x02\x02\x02\u012F"+
		"\u012D\x03\x02\x02\x02\t\x02eqw|\x97\u012D\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!QasmLexer.__ATN) {
			QasmLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(QasmLexer._serializedATN));
		}

		return QasmLexer.__ATN;
	}

}

