{
    "classes": [{
        "name": "ClassicalRegister",
        "detail": "Implement a classical register",
        "documentation": "Implement a classical register.",
        "arguments": [{
                "name": "size",
                "type": "number"
            },
            {
                "name": "name",
                "type": "string",
                "optional": true
            }
        ],
        "methods": [{
                "name": "check_range",
                "type": "boolean",
                "detail": "Check range at current register",
                "documentation": "cr.check_range(j: int)\nCheck that j is a valid index into self.",
                "arguments": [{
                    "name": "position",
                    "type": "number"
                }]
            },
            {
                "name": "qasm",
                "type": "string",
                "detail": "Returns the QASM representation",
                "documentation": "cr.qasm()\nReturn OPENQASM string for this register."
            }
        ]
    }, {
        "name": "QuantumRegister",
        "detail": "Implement a quantum register",
        "documentation": "Implement a quantum register.",
        "arguments": [{
                "name": "size",
                "type": "number"
            },
            {
                "name": "name",
                "type": "string",
                "optional": true
            }
        ],
        "methods": [{
                "name": "check_range",
                "type": "boolean",
                "detail": "Check range at current register",
                "documentation": "cr.check_range(j: int)\nCheck that j is a valid index into self.",
                "arguments": [{
                    "name": "position",
                    "type": "number"
                }]
            },
            {
                "name": "qasm",
                "type": "string",
                "detail": "Returns the QASM representation",
                "documentation": "cr.qasm()\nReturn OPENQASM string for this register."
            }
        ]
    }, {
        "name": "Gate",
        "detail": "Unitary gate",
        "documentation": "Unitary gate.",
        "arguments": [{
            "name": "name",
            "type": "string"
        }, {
            "name": "params",
            "type": "list<string>"
        }, {
            "name": "args",
            "type": "list<Register,index>"
        }, {
            "name": "circuit",
            "type": "QuantumCircuit|CompositeGate",
            "optional": true
        }],
        "methods": [{
            "name": "c_if",
            "type": "void",
            "detail": "Conditional logic on classical register",
            "documentation": "Add classical control on register clasical and value val.",
            "arguments": [{
                    "name": "classical",
                    "type": "ClassicalRegister"
                },
                {
                    "name": "val",
                    "type": "number"
                }
            ]
        }, {
            "name": "check_circuit",
            "detail": "Check the circuit",
            "documentation": "Raise exception if self.circuit is None."
        }, {
            "name": "inverse",
            "detail": "Invert the gate",
            "documentation": "Invert this gate."
        }, {
            "name": "q_if",
            "detail": "Add control",
            "documentation": "Add controls to this gate.",
            "arguments": [{
                "name": "*qregs",
                "type": "QuantumRegister"
            }]
        }]
    }, {
        "name": "QuantumCircuit",
        "detail": "Quantum circuit",
        "documentation": "Quantum circuit.",
        "arguments": [{
                "name": "*regs",
                "type": "QuantumRegister"
            },
            {
                "name": "name",
                "type": "string",
                "optional": true
            }
        ],
        "methods": [{
            "name": "add",
            "type": "void",
            "detail": "Add registers",
            "documentation": "Add registers.",
            "arguments": [{
                "name": "*regs",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "barrier",
            "type": "void",
            "detail": "Apply barrier to circuit",
            "documentation": "Apply barrier to circuit. If args is None, applies to all the qbits. Args is a list of QuantumRegister or single qubits. For QuantumRegister, applies barrier to all the qbits in that register.",
            "arguments": [{
                "name": "*args",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "ccx",
            "type": "void",
            "detail": "Apply Toffoli to from ctl1 and ctl2 to tgt",
            "documentation": "Apply Toffoli to from ctl1 and ctl2 to tgt.",
            "arguments": [{
                "name": "ctl1",
                "type": "QuantumRegister"
            }, {
                "name": "ctl2",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "ccx",
            "type": "void",
            "detail": "Toffoli",
            "documentation": "Apply Toffoli to from ctl1 and ctl2 to tgt",
            "arguments": [{
                "name": "ctl1",
                "type": "QuantumRegister"
            }, {
                "name": "ctl2",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "ch",
            "type": "void",
            "detail": "CH",
            "documentation": "Apply CH from ctl to tgt.",
            "arguments": [{
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "cls_instances",
            "type": "number",
            "detail": "Current number of instances of this class",
            "documentation": "Return the current number of instances of this class, useful for auto naming."
        }, {
            "name": "cls_prefix",
            "type": "string",
            "detail": "Prefix for auto naming",
            "documentation": "Return the prefix to use for auto naming."
        }, {
            "name": "crz",
            "type": "void",
            "detail": "CRZ",
            "documentation": "Apply crz from ctl to tgt with angle theta.",
            "arguments": [{
                "name": "theta",
                "type": "number"
            }, {
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "cswap",
            "type": "void",
            "detail": "Fredkin",
            "documentation": "Apply Fredkin to circuit.",
            "arguments": [{
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt1",
                "type": "QuantumRegister"
            }, {
                "name": "tgt2",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "cu1",
            "type": "void",
            "detail": "CU1",
            "documentation": "Apply cu1 from ctl to tgt with angle theta.",
            "arguments": [{
                "name": "theta",
                "type": "number"
            }, {
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "cu3",
            "type": "void",
            "detail": "CU3",
            "documentation": "Apply cu3 from ctl to tgt with angle theta, phi, lam.",
            "arguments": [{
                "name": "theta",
                "type": "number"
            }, {
                "name": "phi",
                "type": "number"
            }, {
                "name": "lam",
                "type": "number"
            }, {
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "cx",
            "type": "void",
            "detail": "CX",
            "documentation": "Apply CX from ctl to tgt.",
            "arguments": [{
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "cx_base",
            "type": "void",
            "detail": "CX",
            "documentation": "Apply CX ctl, tgt.",
            "arguments": [{
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "cy",
            "type": "void",
            "detail": "CY",
            "documentation": "Apply CY to circuit.",
            "arguments": [{
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "cz",
            "type": "void",
            "detail": "CZ",
            "documentation": "Apply CZ to circuit.",
            "arguments": [{
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "first_atomic_gate_host",
            "type": "void",
            "detail": "List of the leaf gate on the left edge",
            "documentation": "Return the host list of the leaf gate on the left edge."
        }, {
            "name": "get_cregs",
            "type": "list<ClassicalRegister>",
            "detail": "Get the cregs",
            "documentation": "Get the cregs from the registers."
        }, {
            "name": "get_qregs",
            "type": "list<QuantumRegister>",
            "detail": "Get the qregs",
            "documentation": "Get the qregs from the registers."
        }, {
            "name": "h",
            "type": "void",
            "detail": "H",
            "documentation": "Apply H to q.",
            "arguments": [{
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "has_register",
            "type": "boolean",
            "detail": "Checks register existance",
            "documentation": "Test if this gate’s circuit has the register r.",
            "arguments": [{
                "name": "register",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "iden",
            "type": "void",
            "detail": "Identity",
            "documentation": "Apply Identity to q.",
            "arguments": [{
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "initialize",
            "type": "void",
            "detail": "Initialization",
            "documentation": "Apply initialize to circuit.",
            "arguments": [{
                "name": "params",
                "type": "void"
            }, {
                "name": "qubits",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "last_atomic_gate_host",
            "type": "void",
            "detail": "List of the leaf gate on the right edge",
            "documentation": "Return the host list of the leaf gate on the right edge."
        }, {
            "name": "load",
            "type": "QuantumCircuit",
            "detail": "Load the internal simulator representation",
            "documentation": "Load the internal simulator representation (statevector, probability, density matrix, clifford table) Works on all qubits, and prevents reordering (like barrier).",
            "arguments": [{
                "name": "slot",
                "type": "number"
            }]
        }, {
            "name": "measure",
            "type": "Gate",
            "detail": "Measure the quantum bit",
            "documentation": "Measure quantum bit into classical bit (tuples).",
            "arguments": [{
                "name": "qubit",
                "type": "QuantumRegister"
            }, {
                "name": "cbit",
                "type": "ClassicalRegister"
            }]
        }, {
            "name": "noise",
            "type": "void",
            "detail": "Switches noise status on/off",
            "documentation": "Turn noise on/off in simulator. Works on all qubits, and prevents reordering (like barrier).",
            "arguments": [{
                "name": "switch",
                "type": "number"
            }]
        }, {
            "name": "number_atomic_gates",
            "type": "number",
            "detail": "Number of leaf gates",
            "documentation": "Count the number of leaf gates."
        }, {
            "name": "optimize_gates",
            "type": "void",
            "detail": "Optimize",
            "documentation": "Remove Zero rotations and Double CNOTS."
        }, {
            "name": "qasm",
            "type": "string",
            "detail": "QASM representation",
            "documentation": "Return OPENQASM string."
        }, {
            "name": "remove_double_cnots_once",
            "type": "void",
            "detail": "Remove Double CNOTS",
            "documentation": "Remove Double CNOTS paying attention that gates may be neighbours across Composite Gate boundaries."
        }, {
            "name": "remove_zero_rotations",
            "type": "void",
            "detail": "Remove Zero Rotations",
            "documentation": "Remove Zero Rotations by looking (recursively) at rotation gates at the leaf ends."
        }, {
            "name": "reset",
            "type": "void",
            "detail": "Reset q",
            "documentation": "Reset q.",
            "arguments": [{
                "name": "quantum_register",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "reverse",
            "type": "void",
            "detail": "Reverse the sub-gates",
            "documentation": "Reverse (recursively) the sub-gates of this CompositeGate."
        }, {
            "name": "rx",
            "type": "void",
            "detail": "Rx",
            "documentation": "Apply Rx to q.",
            "arguments": [{
                "name": "theta",
                "type": "number"
            }, {
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "ry",
            "type": "void",
            "detail": "Ry",
            "documentation": "Apply Ry to q.",
            "arguments": [{
                "name": "theta",
                "type": "number"
            }, {
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "rz",
            "type": "void",
            "detail": "Rz",
            "documentation": "Apply Rz to q.",
            "arguments": [{
                "name": "phi",
                "type": "number"
            }, {
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "rzz",
            "type": "void",
            "detail": "RZZ",
            "documentation": "Apply RZZ to circuit.",
            "arguments": [{
                "name": "theta",
                "type": "number"
            }, {
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "s",
            "type": "void",
            "detail": "S",
            "documentation": "Apply S to q.",
            "arguments": [{
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "save",
            "type": "QuantumCircuit",
            "detail": "Save internal simulator",
            "documentation": "Save the internal simulator representation (statevector, probability, density matrix, clifford table).",
            "arguments": [{
                "name": "slot",
                "type": "number"
            }]
        }, {
            "name": "sdg",
            "type": "void",
            "detail": "Sdg",
            "documentation": "Apply Sdg to q.",
            "arguments": [{
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "snapshot",
            "type": "QuantumCircuit",
            "detail": "Snapshot of the internal simulator",
            "documentation": "Take a snapshot of the internal simulator representation (statevector, probability, density matrix, clifford table) Works on all qubits, and prevents reordering (like barrier).",
            "arguments": [{
                "name": "slot",
                "type": "number"
            }]
        }, {
            "name": "swap",
            "type": "void",
            "detail": "SWAP",
            "documentation": "Apply SWAP from ctl to tgt.",
            "arguments": [{
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "t",
            "type": "void",
            "detail": "T",
            "documentation": "Apply T to q.",
            "arguments": [{
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "tdg",
            "type": "void",
            "detail": "Tdg",
            "documentation": "Apply Tdg to q.",
            "arguments": [{
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "u0",
            "type": "void",
            "detail": "u0",
            "documentation": "Apply u0 with length m to q.",
            "arguments": [{
                "name": "m",
                "type": "number"
            }, {
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "u1",
            "type": "void",
            "detail": "u1",
            "documentation": "Apply u1 with angle theta to q.",
            "arguments": [{
                "name": "theta",
                "type": "number"
            }, {
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "u2",
            "type": "void",
            "detail": "u2",
            "documentation": "Apply u2 to q.",
            "arguments": [{
                "name": "phi",
                "type": "number"
            }, {
                "name": "lam",
                "type": "number"
            }, {
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "u3",
            "type": "void",
            "detail": "u3",
            "documentation": "Apply u3 to q.",
            "arguments": [{
                "name": "theta",
                "type": "number"
            }, {
                "name": "phi",
                "type": "number"
            }, {
                "name": "lam",
                "type": "number"
            }, {
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "u_base",
            "type": "void",
            "detail": "U",
            "documentation": "Apply U to q.",
            "arguments": [{
                "name": "theta",
                "type": "number"
            }, {
                "name": "phi",
                "type": "number"
            }, {
                "name": "lam",
                "type": "number"
            }, {
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "wait",
            "type": "void",
            "detail": "Wait t",
            "documentation": "Apply wait for time t to q.",
            "arguments": [{
                "name": "t",
                "type": "number"
            }, {
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "x",
            "type": "void",
            "detail": "X",
            "documentation": "Apply X to q.",
            "arguments": [{
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "y",
            "type": "void",
            "detail": "Y",
            "documentation": "Apply Y to q.",
            "arguments": [{
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "z",
            "type": "void",
            "detail": "Z",
            "documentation": "Apply Z to q.",
            "arguments": [{
                "name": "q",
                "type": "QuantumRegister"
            }]
        }]
    }, {
        "name": "CompositeGate",
        "detail": "Composite gate",
        "documentation": "Composite gate, a sequence of unitary gates.",
        "arguments": [{
            "name": "name",
            "type": "string"
        }, {
            "name": "params",
            "type": "list<string>"
        }, {
            "name": "args",
            "type": "list<QuantumRegister>"
        }, {
            "name": "circuit",
            "type": "QuantumCircuit|CompositeGate",
            "optional": true
        }],
        "methods": [{
            "name": "barrier",
            "type": "void",
            "detail": "Apply barrier to circuit",
            "documentation": "Apply barrier to circuit. If args is None, applies to all the qbits. Args is a list of QuantumRegister or single qubits. For QuantumRegister, applies barrier to all the qbits in that register.",
            "arguments": [{
                "name": "*args",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "c_if",
            "type": "void",
            "detail": "Add classical control register",
            "documentation": "Add classical control register.",
            "arguments": [{
                "name": "classical",
                "type": "ClassicalRegister"
            }, {
                "name": "val",
                "type": "number"
            }]
        }, {
            "name": "ccx",
            "type": "void",
            "detail": "Toffoli",
            "documentation": "Apply Toffoli to from ctl1 and ctl2 to tgt",
            "arguments": [{
                "name": "ctl1",
                "type": "QuantumRegister"
            }, {
                "name": "ctl2",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "ch",
            "type": "void",
            "detail": "CH",
            "documentation": "Apply CH from ctl to tgt.",
            "arguments": [{
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "check_circuit",
            "type": "void",
            "detail": "Validates the circuit",
            "documentation": "Raise exception if self.circuit is None."
        }, {
            "name": "crz",
            "type": "void",
            "detail": "CRZ",
            "documentation": "Apply crz from ctl to tgt with angle theta.",
            "arguments": [{
                "name": "theta",
                "type": "number"
            }, {
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "cswap",
            "type": "void",
            "detail": "Fredkin",
            "documentation": "Apply Fredkin to circuit.",
            "arguments": [{
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt1",
                "type": "QuantumRegister"
            }, {
                "name": "tgt2",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "cu1",
            "type": "void",
            "detail": "CU1",
            "documentation": "Apply cu1 from ctl to tgt with angle theta.",
            "arguments": [{
                "name": "theta",
                "type": "number"
            }, {
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "cu3",
            "type": "void",
            "detail": "CU3",
            "documentation": "Apply cu3 from ctl to tgt with angle theta, phi, lam.",
            "arguments": [{
                "name": "theta",
                "type": "number"
            }, {
                "name": "phi",
                "type": "number"
            }, {
                "name": "lam",
                "type": "number"
            }, {
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "cx",
            "type": "void",
            "detail": "CX",
            "documentation": "Apply CX from ctl to tgt.",
            "arguments": [{
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "cx_base",
            "type": "void",
            "detail": "CX",
            "documentation": "Apply CX ctl, tgt.",
            "arguments": [{
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "cy",
            "type": "void",
            "detail": "CY",
            "documentation": "Apply CY to circuit.",
            "arguments": [{
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "cz",
            "type": "void",
            "detail": "CZ",
            "documentation": "Apply CZ to circuit.",
            "arguments": [{
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "first_atomic_gate_host",
            "type": "void",
            "detail": "List of the leaf gate on the left edge",
            "documentation": "Return the host list of the leaf gate on the left edge."
        }, {
            "name": "h",
            "type": "void",
            "detail": "H",
            "documentation": "Apply H to q.",
            "arguments": [{
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "has_register",
            "type": "boolean",
            "detail": "Checks register existance",
            "documentation": "Test if this gate’s circuit has the register r.",
            "arguments": [{
                "name": "register",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "iden",
            "type": "void",
            "detail": "Identity",
            "documentation": "Apply Identity to q.",
            "arguments": [{
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "initialize",
            "type": "void",
            "detail": "Initialization",
            "documentation": "Apply initialize to circuit.",
            "arguments": [{
                "name": "params",
                "type": "void"
            }, {
                "name": "qubits",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "instruction_list",
            "type": "list<string>",
            "detail": "Instruction's list",
            "documentation": "Return a list of instructions for this CompositeGate."
        }, {
            "name": "inverse",
            "type": "void",
            "detail": "Invert this gate",
            "documentation": "Invert this gate."
        }, {
            "name": "last_atomic_gate_host",
            "type": "void",
            "detail": "List of the leaf gate on the right edge",
            "documentation": "Return the host list of the leaf gate on the right edge."
        }, {
            "name": "load",
            "type": "QuantumCircuit",
            "detail": "Load the internal simulator representation",
            "documentation": "Load the internal simulator representation (statevector, probability, density matrix, clifford table) Works on all qubits, and prevents reordering (like barrier).",
            "arguments": [{
                "name": "slot",
                "type": "number"
            }]
        }, {
            "name": "noise",
            "type": "void",
            "detail": "Switches noise status on/off",
            "documentation": "Turn noise on/off in simulator. Works on all qubits, and prevents reordering (like barrier).",
            "arguments": [{
                "name": "switch",
                "type": "int(0,1)"
            }]
        }, {
            "name": "number_atomic_gates",
            "type": "number",
            "detail": "Number of leaf gates",
            "documentation": "Count the number of leaf gates."
        }, {
            "name": "optimize_gates",
            "type": "void",
            "detail": "Optimize",
            "documentation": "Remove Zero rotations and Double CNOTS."
        }, {
            "name": "q_if",
            "type": "void",
            "detail": "Controls",
            "documentation": "Add controls to this gate.",
            "arguments": [{
                "name": "*qregs",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "qasm",
            "type": "string",
            "detail": "QASM representation",
            "documentation": "Return OPENQASM string."
        }, {
            "name": "remove_double_cnots_once",
            "type": "void",
            "detail": "Remove Double CNOTS",
            "documentation": "Remove Double CNOTS paying attention that gates may be neighbours across Composite Gate boundaries."
        }, {
            "name": "remove_zero_rotations",
            "type": "void",
            "detail": "Remove Zero Rotations",
            "documentation": "Remove Zero Rotations by looking (recursively) at rotation gates at the leaf ends."
        }, {
            "name": "reverse",
            "type": "void",
            "detail": "Reverse the sub-gates",
            "documentation": "Reverse (recursively) the sub-gates of this CompositeGate."
        }, {
            "name": "rx",
            "type": "void",
            "detail": "Rx",
            "documentation": "Apply Rx to q.",
            "arguments": [{
                "name": "theta",
                "type": "number"
            }, {
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "ry",
            "type": "void",
            "detail": "Ry",
            "documentation": "Apply Ry to q.",
            "arguments": [{
                "name": "theta",
                "type": "number"
            }, {
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "rz",
            "type": "void",
            "detail": "Rz",
            "documentation": "Apply Rz to q.",
            "arguments": [{
                "name": "phi",
                "type": "number"
            }, {
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "rzz",
            "type": "void",
            "detail": "RZZ",
            "documentation": "Apply RZZ to circuit.",
            "arguments": [{
                "name": "theta",
                "type": "number"
            }, {
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "s",
            "type": "void",
            "detail": "S",
            "documentation": "Apply S to q.",
            "arguments": [{
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "save",
            "type": "QuantumCircuit",
            "detail": "Save internal simulator",
            "documentation": "Save the internal simulator representation (statevector, probability, density matrix, clifford table).",
            "arguments": [{
                "name": "slot",
                "type": "number"
            }]
        }, {
            "name": "sdg",
            "type": "void",
            "detail": "Sdg",
            "documentation": "Apply Sdg to q.",
            "arguments": [{
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "snapshot",
            "type": "QuantumCircuit",
            "detail": "Snapshot of the internal simulator",
            "documentation": "Take a snapshot of the internal simulator representation (statevector, probability, density matrix, clifford table) Works on all qubits, and prevents reordering (like barrier).",
            "arguments": [{
                "name": "slot",
                "type": "number"
            }]
        }, {
            "name": "swap",
            "type": "void",
            "detail": "SWAP",
            "documentation": "Apply SWAP from ctl to tgt.",
            "arguments": [{
                "name": "ctl",
                "type": "QuantumRegister"
            }, {
                "name": "tgt",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "t",
            "type": "void",
            "detail": "T",
            "documentation": "Apply T to q.",
            "arguments": [{
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "tdg",
            "type": "void",
            "detail": "Tdg",
            "documentation": "Apply Tdg to q.",
            "arguments": [{
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "u0",
            "type": "void",
            "detail": "u0",
            "documentation": "Apply u0 with length m to q.",
            "arguments": [{
                "name": "m",
                "type": "number"
            }, {
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "u1",
            "type": "void",
            "detail": "u1",
            "documentation": "Apply u1 with angle theta to q.",
            "arguments": [{
                "name": "theta",
                "type": "number"
            }, {
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "u2",
            "type": "void",
            "detail": "u2",
            "documentation": "Apply u2 to q.",
            "arguments": [{
                "name": "phi",
                "type": "number"
            }, {
                "name": "lam",
                "type": "number"
            }, {
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "u3",
            "type": "void",
            "detail": "u3",
            "documentation": "Apply u3 to q.",
            "arguments": [{
                "name": "theta",
                "type": "number"
            }, {
                "name": "phi",
                "type": "number"
            }, {
                "name": "lam",
                "type": "number"
            }, {
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "u_base",
            "type": "void",
            "detail": "U",
            "documentation": "Apply U to q.",
            "arguments": [{
                "name": "theta",
                "type": "number"
            }, {
                "name": "phi",
                "type": "number"
            }, {
                "name": "lam",
                "type": "number"
            }, {
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "wait",
            "type": "void",
            "detail": "Wait t",
            "documentation": "Apply wait for time t to q.",
            "arguments": [{
                "name": "t",
                "type": "number"
            }, {
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "x",
            "type": "void",
            "detail": "X",
            "documentation": "Apply X to q.",
            "arguments": [{
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "y",
            "type": "void",
            "detail": "Y",
            "documentation": "Apply Y to q.",
            "arguments": [{
                "name": "q",
                "type": "QuantumRegister"
            }]
        }, {
            "name": "z",
            "type": "void",
            "detail": "Z",
            "documentation": "Apply Z to q.",
            "arguments": [{
                "name": "q",
                "type": "QuantumRegister"
            }]
        }]
    }, {
        "name": "Instruction",
        "detail": "Quantum computer instruction",
        "documentation": "Generic quantum computer instruction.",
        "arguments": [{
            "name": "name",
            "type": "string"
        }, {
            "name": "param",
            "type": "list<real>"
        }, {
            "name": "args",
            "type": "list<Register,index>"
        }, {
            "name": "circuit",
            "type": "QuantumCircuit|CompositeGate",
            "optional": true
        }],
        "methods": [{
            "name": "c_if",
            "type": "void",
            "detail": "Conditional logic on classical register",
            "documentation": "Add classical control on register clasical and value val.",
            "arguments": [{
                    "name": "classical",
                    "type": "ClassicalRegister"
                },
                {
                    "name": "val",
                    "type": "number"
                }
            ]
        }, {
            "name": "check_circuit",
            "type": "void",
            "detail": "Check the circuit",
            "documentation": "Raise exception if self.circuit is None."
        }]
    }, {
        "name": "InstructionSet",
        "detail": "Instruction collection",
        "documentation": "Instruction collection.",
        "methods": [{
            "name": "add",
            "type": "void",
            "detail": "Add instruction",
            "documentation": "Add instruction to set.",
            "arguments": [{
                "name": "gate",
                "type": "Gate"
            }]
        }, {
            "name": "c_if",
            "type": "void",
            "detail": "Conditional logic on classical register",
            "documentation": "Add classical control on register to all instructions.",
            "arguments": [{
                    "name": "classical",
                    "type": "ClassicalRegister"
                },
                {
                    "name": "val",
                    "type": "number"
                }
            ]
        }, {
            "name": "inverse",
            "type": "void",
            "detail": "Invert instructions",
            "documentation": "Invert all instructions"
        }, {
            "name": "q_if",
            "type": "void",
            "detail": "Controls",
            "documentation": "Add controls to all instructions.",
            "arguments": [{
                "name": "*qregs",
                "type": "QuantumRegister"
            }]
        }]
    }, {
        "name": "Measure",
        "detail": "Quantum measurement",
        "documentation": "Quantum measurement in the computational basis.",
        "arguments": [{
            "name": "qubit",
            "type": "QuantumRegister"
        }, {
            "name": "bit",
            "type": "ClassicalRegister"
        }, {
            "name": "circuit",
            "type": "QuantumCircuit",
            "optional": true
        }],
        "methods": [{
            "name": "c_if",
            "type": "void",
            "detail": "Add classical control register",
            "documentation": "Add classical control on register clasical and value val.",
            "arguments": [{
                "name": "classical",
                "type": "ClassicalRegister"
            }, {
                "name": "val",
                "type": "number"
            }]
        }, {
            "name": "check_circuit",
            "type": "void",
            "detail": "Validates the circuit",
            "documentation": "Raise exception if self.circuit is None."
        }, {
            "name": "qasm",
            "type": "string",
            "detail": "Returns the QASM representation",
            "documentation": "Return OPENQASM string."
        }, {
            "name": "reapply",
            "type": "void",
            "detail": "Reapply gate",
            "documentation": "Reapply this gate to corresponding qubits.",
            "arguments": [{
                "name": "circuit",
                "type": "QuantumCircuit"
            }]
        }]
    }, {
        "name": "Result",
        "detail": "Result",
        "documentation": "Methods to process the quantum program after it has been run.",
        "methods": [{
            "name": "average_data",
            "type": "number",
            "detail": "The mean value",
            "documentation": "Compute the mean value of an diagonal observable.\nTakes in an observable in dictionary format and then calculates the sum_i value(i) P(i) where value(i) is the value of the observable for state i.",
            "arguments": [{
                "name": "name",
                "type": "string"
            }, {
                "name": "observable",
                "type": "dict"
            }]
        }, {
            "name": "circuit_statuses",
            "type": "list<string>",
            "detail": "Statuses of all circuits",
            "documentation": "Return statuses of all circuits."
        }, {
            "name": "get_circuit_status",
            "type": "string",
            "detail": "Status of a circuit",
            "documentation": "Return the status of circuit at index icircuit.",
            "arguments": [{
                "name": "icircuit",
                "type": "number"
            }]
        }, {
            "name": "get_counts",
            "type": "dict",
            "detail": "Histogram data",
            "documentation": "Get the histogram data of circuit name.\nThe data from the a qasm circuit is dictionary of the format {‘00000’: XXXX, ‘00001’: XXXXX}.",
            "arguments": [{
                "name": "circuit_name",
                "type": "string"
            }]
        }, {
            "name": "get_data",
            "type": "dict",
            "detail": "Circuit data",
            "documentation": "Get the data of circuit name.",
            "arguments": [{
                "name": "circuit_name",
                "type": "string"
            }]
        }, {
            "name": "get_job_id",
            "type": "string",
            "detail": "Return the job ID",
            "documentation": "Return the job id assigned by the api if this is a remote job."
        }, {
            "name": "get_names",
            "type": "list<string>",
            "detail": "Circuit names of the result",
            "documentation": "Get the circuit names of the results."
        }, {
            "name": "get_qubitpol_vs_xval",
            "type": "qubit_pol",
            "detail": "Polarization of each qubit for all circuits",
            "documentation": "Compute the polarization of each qubit for all circuits and pull out each circuits xval into an array. Assumes that each circuit has the same number of qubits and that all qubits are measured.",
            "arguments": [{
                "name": "xvals_dict",
                "type": "dict"
            }]
        }, {
            "name": "get_ran_qasm",
            "type": "string",
            "detail": "ran qasm for the named circuit",
            "documentation": "Get the ran qasm for the named circuit and backend.",
            "arguments": [{
                "name": "name",
                "type": "string"
            }]
        }, {
            "name": "get_snapshot",
            "type": "dict",
            "detail": "Snapshot of a specific slot",
            "documentation": "Get snapshot at a specific slot.",
            "arguments": [{
                "name": "circuit_name",
                "type": "string|QuantumCircuit"
            }, {
                "name": "slot",
                "type": "string"
            }]
        }, {
            "name": "get_snapshots",
            "type": "dict",
            "detail": "Snapshots recorded during the run",
            "documentation": "Get snapshots recorded during the run.\nThe data is a dictionary: where keys are requested snapshot slots. and values are a dictionary of the snapshots themselves.",
            "arguments": [{
                "name": "circuit_name",
                "type": "string|QuantumCircuit"
            }]
        }, {
            "name": "get_statevector",
            "type": "list",
            "detail": "Final statevector of circuit",
            "documentation": "Get the final statevector of circuit name.\nThe data is a list of complex numbers [1.+0.j, 0.+0.j].",
            "arguments": [{
                "name": "circuit_name",
                "type": "string|QuantumCircuit"
            }]
        }, {
            "name": "get_status",
            "type": "dict",
            "detail": "QObj result status",
            "documentation": "Return whole qobj result status."
        }]
    }, {
        "name": "QuantumProgram",
        "detail": "Quantum program",
        "documentation": "Quantum program.",
        "methods": [{
            "name": "add_circuit",
            "type": "void",
            "detail": "Add new circuit",
            "documentation": "Add a new circuit based on an Object representation.",
            "arguments": [{
                "name": "name",
                "type": "string",
                "optional": true
            }, {
                "name": "quantum_circuit",
                "type": "QuantumCircuit",
                "optional": true
            }]
        }, {
            "name": "create_circuit",
            "type": "QuantumCircuit",
            "detail": "Create empty circuit",
            "documentation": "Create a empty Quantum Circuit in the Quantum Program.",
            "arguments": [{
                "name": "name",
                "type": "string",
                "optional": true
            }, {
                "name": "qregisters",
                "type": "list<QuantumRegister>",
                "optional": true
            }, {
                "name": "cregisters",
                "type": "list<ClassicalRegister>",
                "optional": true
            }]
        }, {
            "name": "create_classical_register",
            "type": "ClassicalRegister",
            "detail": "Create a new Classical Register",
            "documentation": "Create a new Classical Register.",
            "arguments": [{
                "name": "name",
                "type": "string",
                "optional": true,
                "defaultValue": "None"
            }, {
                "name": "size",
                "type": "number",
                "optional": true,
                "defaultValue": "1"
            }]
        }, {
            "name": "create_classical_registers",
            "type": "list<ClassicalRegister>",
            "detail": "Create a new set of Classical Registers",
            "documentation": "Create a new set of Classical Registers.",
            "arguments": [{
                "name": "registersArray",
                "type": "list<dict>"
            }]
        }, {
            "name": "create_quantum_register",
            "type": "QuantumRegister",
            "detail": "Create a new Quantum Register",
            "documentation": "Create a new Quantum Register.",
            "arguments": [{
                "name": "name",
                "type": "string",
                "optional": true,
                "defaultValue": "None"
            }, {
                "name": "size",
                "type": "number",
                "optional": true,
                "defaultValue": "1"
            }]
        }, {
            "name": "create_quantum_registers",
            "type": "list<QuantumRegister>",
            "detail": "Create a new set of Quantum Registers",
            "documentation": "Create a new set of Quantum Registers.",
            "arguments": [{
                "name": "registersArray",
                "type": "list<dict>"
            }]
        }, {
            "name": "destroy_circuit",
            "type": "void",
            "detail": "Destroy a Quantum Circuit",
            "documentation": "Destroy a Quantum Circuit in the Quantum Program. This will not destroy any registers associated with the circuit.",
            "arguments": [{
                "name": "name",
                "type": "string"
            }]
        }, {
            "name": "destroy_classical_register",
            "type": "void",
            "detail": "Destroy a Classical Register",
            "documentation": "Destroy an existing Classical Register.",
            "arguments": [{
                "name": "name",
                "type": "string"
            }]
        }, {
            "name": "destroy_classical_registers",
            "type": "void",
            "detail": "Destroy a set of Classical Registers",
            "documentation": "Destroy a set of Classical Registers based on a array of them.",
            "arguments": [{
                "name": "registersArray",
                "type": "list<dict>"
            }]
        }, {
            "name": "destroy_quantum_register",
            "type": "void",
            "detail": "Destroy a Quantum Register",
            "documentation": "Destroy an existing Quantum Register.",
            "arguments": [{
                "name": "name",
                "type": "string"
            }]
        }, {
            "name": "destroy_quantum_registers",
            "type": "void",
            "detail": "Destroy a set of Quantum Registers",
            "documentation": "Destroy a set of Quantum Registers based on a array of them.",
            "arguments": [{
                "name": "registersArray",
                "type": "list<dict>"
            }]
        }, {
            "name": "get_circuit",
            "type": "QuantumCircuit",
            "detail": "Return a Circuit",
            "documentation": "Return a Circuit Object by name.",
            "arguments": [{
                "name": "name",
                "type": "string"
            }]
        }, {
            "name": "get_circuit_names",
            "type": "list<string>",
            "detail": "Return names of the circuits",
            "documentation": "Return all the names of the quantum circuits."
        }, {
            "name": "get_classical_register",
            "type": "ClassicalRegister",
            "detail": "Return the Classical Register",
            "documentation": "Return a Classical Register by name.",
            "arguments": [{
                "name": "name",
                "type": "string"
            }]
        }, {
            "name": "get_classical_register_names",
            "type": "list<string>",
            "detail": "Return the names of the Classical Registers",
            "documentation": "Return all the names of the classical Registers."
        }, {
            "name": "get_initial_circuit()",
            "type": "QuantumCircuit",
            "detail": "Return the initialization",
            "documentation": "Return the initialization Circuit."
        }, {
            "name": "get_qasm",
            "type": "string",
            "detail": "Get qasm format",
            "documentation": "Get qasm format of circuit by name.",
            "arguments": [{
                "name": "name",
                "type": "string"
            }]
        }, {
            "name": "get_qasms",
            "type": "list<QuantmCircuit>",
            "detail": "Get qasm format",
            "documentation": "Get qasm format of circuit by list of names.",
            "arguments": [{
                "name": "list_circuit_name",
                "type": "list<string>"
            }]
        }, {
            "name": "get_quantum_register",
            "type": "QuantumRegister",
            "detail": "Return a Quantum Register",
            "documentation": "Return a Quantum Register by name.",
            "arguments": [{
                "name": "name",
                "type": "string"
            }]
        }, {
            "name": "get_quantum_register_names",
            "type": "list<string>",
            "detail": "Names of the Quantum Registers",
            "documentation": "Return all the names of the quantum Registers."
        }, {
            "name": "load",
            "type": "void",
            "detail": "Load a Quantum Program",
            "documentation": "Load Quantum Program Json file into the Quantum Program object.",
            "arguments": [{
                "name": "file_name",
                "type": "string"
            }]
        }, {
            "name": "load_qasm_file",
            "type": "void",
            "detail": "Load QASM into the Quantum Program",
            "documentation": "Load qasm file into the quantum program.",
            "arguments": [{
                "name": "qasm_file",
                "type": "string"
            }, {
                "name": "name",
                "type": "string"
            }, {
                "name": "basis_gates",
                "type": "string"
            }]
        }, {
            "name": "load_qasm_text",
            "type": "void",
            "detail": "Load QASM into the Quantum Program",
            "documentation": "Load qasm string in the quantum program.",
            "arguments": [{
                "name": "qasm_string",
                "type": "string"
            }, {
                "name": "name",
                "type": "string"
            }, {
                "name": "basis_gates",
                "type": "string"
            }]
        }, {
            "name": "reconfig",
            "type": "void",
            "detail": "Change configuration parameters",
            "documentation": "Change configuration parameters for a compile qobj. Only parameters which don’t affect the circuit compilation can change, e.g., the coupling_map cannot be changed here!",
            "arguments": [{
                "name": "qobj",
                "type": "dict"
            }, {
                "name": "backend",
                "type": "string"
            }, {
                "name": "config",
                "type": "dict"
            }, {
                "name": "shots",
                "type": "number"
            }, {
                "name": "max_credits",
                "type": "number"
            }, {
                "name": "seed",
                "type": "number"
            }]
        }, {
            "name": "run",
            "type": "Result",
            "detail": "Run a program",
            "documentation": "Run a program (a pre-compiled quantum program). This function will block until the Job is processed.\nThe program to run is extracted from the qobj parameter.",
            "arguments": [{
                "name": "qobj",
                "type": "dict"
            }, {
                "name": "timeout",
                "type": "number"
            }]
        }, {
            "name": "run_batch",
            "type": "list<Result>",
            "detail": "Run various programs",
            "documentation": "Run various programs (a list of pre-compiled quantum programs). This function will block until all programs are processed.\nThe programs to run are extracted from qobj elements of the list.",
            "arguments": [{
                "name": "qobj_list",
                "type": "list<dict>"
            }, {
                "name": "timeout",
                "type": "number"
            }]
        }, {
            "name": "save",
            "type": "void",
            "detail": "Save a Quantum Program",
            "documentation": "Save Quantum Program in a Json file.",
            "arguments": [{
                "name": "file_name",
                "type": "string"
            }, {
                "name": "beauty",
                "type": "boolean"
            }]
        }]
    }, {
        "name": "Reset",
        "detail": "Qubit reset",
        "documentation": "Qubit reset.",
        "arguments": [{
            "name": "qubit",
            "type": "QuantumRegister"
        }, {
            "name": "circuit",
            "type": "QuantumCircuit",
            "optional": true
        }],
        "methods": [{
            "name": "c_if",
            "type": "void",
            "detail": "Add classical control register",
            "documentation": "Add classical control on register clasical and value val.",
            "arguments": [{
                "name": "classical",
                "type": "ClassicalRegister"
            }, {
                "name": "val",
                "type": "number"
            }]
        }, {
            "name": "check_circuit",
            "type": "void",
            "detail": "Validates the circuit",
            "documentation": "Raise exception if self.circuit is None."
        }, {
            "name": "qasm",
            "type": "string",
            "detail": "Returns the QASM representation",
            "documentation": "Return OPENQASM string."
        }, {
            "name": "reapply",
            "type": "void",
            "detail": "Reapply gate",
            "documentation": "Reapply this gate to corresponding qubits.",
            "arguments": [{
                "name": "circuit",
                "type": "QuantumCircuit"
            }]
        }]
    }]
}
