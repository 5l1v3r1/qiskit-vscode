{
	"qbasic": {
		"prefix": "qbasic",
		"body": "from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister
		from qiskit import execute, register
		from qiskit import IBMQ, Aer
		
		# register if you have a token
		API_TOKEN = '${1}'
		if(API_TOKEN != ''):
			IBMQ.enable_account(API_TOKEN, \"https://quantumexperience.ng.bluemix.net/api\")
		
		# declaration
		QR = QuantumRegister(2, 'q')
		CR = ClassicalRegister(2, 'c')
		QC = QuantumCircuit(QR, CR, name='Bell state')
		
		
		# Build your Circuit
		QC.h(QR[0])
		QC.cx(QR[0], QR[1])
		QC.measure(QR[0], CR[0])
		QC.measure(QR[1], CR[1])
		
		# chceck for avaialbale backends
		PREFERRED_BACKEND = '${2}'
		if PREFERRED_BACKEND != '':
			backend_object = Aer.get_backend(PREFERRED_BACKEND)
		else:
			backend_object = Aer.get_backend('qasm_simulator')
		
		# execute it
		if __name__ == '__main__':
			execution_job = execute(QC, backend_object)
			result = execution_job.result()
			print(result.get_counts())",
		"description": "initial code for qiskit",
		"scope": "source.python"
	},
	"qbasic_imports": {
		"prefix": "qbasic_imports",
		"body": [
			"from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister",
			"from qiskit import execute, register",
			"from qiskit import IBMQ, Aer"
		],
		"description": "basic imports to get started with qiskit",
		"scope": "source.python"
	},
	"qviz_imports": {
		"prefix": "qviz_imports",
		"body": [
			"from qiskit.tools.visualization import plot_histogram, plot_circuit"
		],
		"description": "basic visualization imports to get started with qiskit",
		"scope": "source.python"
	},
	"qviz_histplot": {
		"prefix": "qviz_histplot",
		"body": [
			"plot_histogram(${1:result}.get_counts())"
		],
		"description": "histogram plots",
		"scope": "source.python"
	}
}
