{
    "import": {
        "prefix": "import",
        "body": [ 
            "from qiskit_aqua import run_algorithm",
            "from qiskit_aqua.input import get_input_instance",
            "from qiskit_aqua.translators.ising import partition" 
        ],
        "description": "Code snippet for the basic imports in Qiskit Aqua"
    },
    "input_partition": {
        "prefix": "input_partition",
        "body": [
            "qubitOp, offset = partition.get_partition_qubitops(${1:number_list})",
            "${2:input} = get_input_instance('EnergyInput')",
            "${2:input}.qubit_op = qubitOp"
        ],
        "description": "Code snippet for a partition problem input using Qiskit Aqua"
    },
    "grover": {
        "prefix": "grover",
        "body": [
            "${1:params} = {",
            "\t'problem': {'name': '${2:search}'},",
            "\t'algorithm': {'name': 'Grover'},",
            "\t'oracle': {'name': 'SAT', 'cnf': ${3:oracle_cnf_reference}},",
            "\t'backend': {'name': 'local_qasm_simulator'}",
            "}",
            "",
            "${4:result} = run_algorithm(${1:params})"
        ],
        "description": "Code snippet for the Grover algorithm using Qiskit Aqua"
    },
    "vqe": {
        "prefix": "vqe",
        "body": [
            "${1:params} = {",
            "\t'problem': {'name': '${2:ising}'},",
            "\t'algorithm': {'name': 'VQE', 'operator_mode': 'matrix'},",
            "\t'optimizer': {'name': 'L_BFGS_B', 'maxfun': 6000},",
            "\t'variational_form': {'name': 'RYRZ', 'depth': 3, 'entanglement': 'linear'},",
            "\t'backend': {'name': 'local_qasm_simulator'}",
            "}",
            "",
            "${3:result} = run_algorithm(${1:params}, ${4:input})"
        ],
        "description": "Code snippet for the Grover algorithm using Qiskit Aqua"
    },
    "print_eigensolver_result": {
        "prefix": "print_eigensolver_result",
        "body": [
            "x = partition.sample_most_likely(${1:result}['eigvecs'][0])",
            "print('energy:', ${1:result}['energy'])",
            "print('time:', ${1:result}['eval_time'])",
            "print('partition objective:', ${1:result}['energy'] + offset)",
            "print('solution:', x)",
            "print('solution objective:', partition.partition_value(x, number_list))"
        ],
        "description": "Code snippet to print an Eigensolver solution using Qiskit Aqua"
    }
}